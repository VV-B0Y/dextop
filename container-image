#!/bin/bash

# dependencies #

. "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-17-2022"

# usage #

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# defaults #

# functions #

image_architecture () {
	#comaprae system architecture to available image architectures

	cpu_architectures=(
		aarch64
		arm
		amd64
		i*86
		x86_64
	)

	# list supported image architechtures

	image_architectures=(
		arm64
		armhf
		amd64
		i386
		amd64
	)

	# test processor architecture string

	device_architecture="$(uname -m)"

	for i in ${!cpu_architectures[@]}
	do
		if [[ "${device_architecture}" == "${cpu_architectures[i]}" ]]
		then
			image_architecture=${image_architectures[i]}

			console.scs "Supported architecture" "[ ${image_architecture} ]"
			echo

			break
		else
			console.wrn "Unsupported architecture" "[ ${image_architecture} ]"
			echo

			console.fwd "Aborting..."
			echo

			console.stp "Exiting."
			echo

			exit 1
		fi
	done

	# test image architecture string

	if [ -z "$image_architecture" ] || [ -z "${device_architecture}" ]
	then
		image_architecture="N/A"

		console.wrn "Unknown architecture" "[ ${image_architecture} ]"
		echo

		console.fwd "Aborting..."
		echo

		console.stp "Exiting."
		echo

		exit 1
	fi
}

image_version () {
	# list distributions for setup

	console.msg "Select distribution version to setup."
	echo

	# list supported distribution versions

	ubuntu_versions=(
		ubuntu	20.04.3
		ubuntu	20.10
		ubuntu	21.04
		ubuntu	21.10
	)

	fedora_versions=(
		fedora	35
		fedora	36
	)

	versions=(
		${ubuntu_versions[@]}
		${fedora_versions[@]}
	)

	# set padding for uniform output

	pad_length=10

	# continue list using array selection of suppported values

	for (( i=0 ; i<${#versions[@]} ; i+=2 ))
	do
		name="${versions[$i]}"
		version="${versions[$i+1]}"

		number=$((($i/2) + 1))

		if (( $i/2 >= 0 && $i/2 <= 8 ))
		then
				# handle number spacing for entries 1-9

				printf '      [  %s ] %s %s' ${number} ${name}
		else
				# handle number spacing for entries 10+

				printf '      [ %s ] %s %s' ${number} ${name}
		fi

		printf '%*s' $((pad_length - ${#name}))
		printf '%s\n' ${version}
	done

	printf '\n'

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	eval ${console_rtn[@]}

	console.ipt "Selection:"

	read selection
	echo

	unset distribution_version

	# integer check:
	# handle numerical selection

	if [[ "${selection}" =~ ^[0-9]+$ ]]
	then
		i=$((${selection}))
		i=$(($i*2))

		version="${versions[i-1]}"
		name="${versions[i-2]}"

		distribution_name="${name}"
		distribution_version="${version}"
	fi

	# handle distribution code markup

	# set IFS

	IFS='.'

	read code_year code_month code_revision <<< "${distribution_version}"

	if [ -z "${code_revision}" ]
	then
		distribution_release="${distribution_version}"
	else
		distribution_release="${distribution_version%.*}"
	fi

	# reset IFS

	IFS=''

	export distribution_name="${distribution_name}"
	export distribution_release="${distribution_release}"
	export distribution_version="${distribution_version}"
}

image_download () {
	# generate links and download distribution image

	# handle distribution url

	case "${distribution_name}" in
		ubuntu)
			image_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${distribution_version}/release"
			image_archive="ubuntu-base-${distribution_version}-base-${image_architecture}.tar.gz"
		;;

		fedora)
			image_url="https://download.fedoraproject.org/pub/fedora/linux/releases/${distribution_version}/Container/${image_architecture}/images"
			image_archive="Fedora-Container-Base-${distribution_version}-1.2.${image_architecture}.tar.xz"
		;;
	esac

	console.download "${image_url}" "${PREFIX}"/img "${image_archive}"
}

image_extract () {
echo test
}

image_unpack () {
	# shorthand:
	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'container-session' will bind those device directories to the container

	console.inf "Extracting new deployment."
	echo

#	proot														\
#		--link2symlink											\

			tar 												\
				--extract										\
				--delay-directory-restore						\
				--preserve-permissions							\
					--file="${PREFIX}/img/${image_archive}"		\
							--exclude='json'					\
							--exclude='boot'					\
							--exclude='dev'						\
							--exclude='proc'					\
							--exclude='sys'						\
							--exclude='system' 					\
							--directory="${PREFIX}"/cnt/testfedora
}

# run setup

# verify architecture

image_architecture

# choose image version

image_version

# download image

image_download

# unpack image into container

image_unpack
