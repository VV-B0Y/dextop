#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# /etc/os-release: source distribution codename variables (e.g. $NAME)

source /etc/os-release

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="08-05-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

PORT="590${DISPLAY:1}"

vnc_start () {
	console.silence "
				vncserver								\
					-IdleTimeout 0						\
					-SecurityTypes none					\
					-localhost yes						\
					-depth 32							\
					-cleanstale							\
					-name $NAME							\
					-geometry ${GEOMETRY} ${DISPLAY}	\
						-- ${SESSION}"

					# 'vncserver' uses $DISPLAY instead of $PORT

	console.fwd "Starting display server..."
	echo

	console.inf "Format" "${format}"
	console.inf "Resolution" "${GEOMETRY}"
	console.inf "Port" "${PORT}"
	echo

	# make selection available for automatic start

	# verify user id - do not write selection when 'root' user is logged in

	if [[ $(id -u) -ne 0 ]]
	then
		# integer check: do not write non numerical values to file

		if [[ "${selection}" =~ ^[0-9]+$ ]]
		then
			echo "${selection}" > /home/"${USER}"/.vnc/selection
		fi
	fi

	# start android vnc intent
	# and force-stop existing outputs
	# before intent launch

	# am start							\
	#	-d vnc://${LOCALHOST}:${PORT}	\
	#	-S application/activity"

	console.silence "am start -d vnc://${LOCALHOST}:${PORT} -S ${VNC}"
}

vnc_resolutions () {
	console.msg "Enter a selection to start the display server with"
	console.msg "or choose a [c]ustom display geometry: "
	echo

	console.wait 1

	# list supported display resolutions

	monitors=(
		VGA	      640     480
		WVGA	  768     480
		SVGA	  800     600
		FWVGA	  854     480
		qHD	      960     540
		DVGA	  960     640
		WSVGA	 1024    576
		WSVGA	 1024    600
		XGA	     1024    768
		XGA+	 1152    864
		HD	     1280    720
		WXGA	 1366    768
		WXGA+	 1440    900
		HD+	     1600    900

		SXGA	 1280    1024
		SXGA+	 1400    1050
		UXGA	 1600    1200
		WSXGA+	 1680    1050
		FHD	     1920    1080
		WUXGA	 1920    1200
		DCI2K	 2048    1080
		QWXGA	 2048    1152
		QXGA	 2048    1536
		UWFHD	 2560    1080
		QHD	     2560    1440
		WQXGA	 2560    1600
		QSXGA	 2560    2048
		QHD+	 3200    1800
		WQSXGA	 3200    2048
		QUXGA	 3200    2400
		UWQHD	 3440    1440
		UW4K	 3840    1600
		4KUHD	 3840    2160
		WQUXGA	 3840    2400
		DCI4K	 4096    2160
		UW5K	 5120    2160
		5K	     5120    2880
		8KUHD	 7680    4320
	)

	phones=(
		GN6P	 2560    1440
		GN6	     2560    1440
		GN5X	 1920    1080
		GN5	     1920    1080
		GP5	     2340    1080
		GP4XL	 3040    1440
		GP4a	 2340    1080
		GP4	     2280    1080
		GP3aXL	 2160    1080
		GP3a	 2220    1080
		GP3XL	 2960    1440
		GP3	     2160    1080
		GP2XL	 2880    1440
		GP2	     1920    1080
		GPXL	 2560    1440
		GP	     1920    1080

		SGN20+	 3088    1440
		SGN20	 3200    1440
		SGN10+	 3040    1440
		SGN10	 2280    1080
		SGN9	 2960    1440
		SGN8	 2960    1440
		SGN7	 2560    1440

		SGS10+	 3040    1440
		SGS10	 3040    1440
		SGS9+	 2960    1440
		SGS9	 2960    1440
		SGS8+	 2960    1440
		SGS8	 2960    1440
		SGS7E	 2560    1440
		SGS7	 2560    1440
		SGS6E+	 2560    1440
		SGS6E	 2560    1440
		SGS6	 2560    1440
	)

	tablets=(
		GN9	     2048    1536
		GN7-2013 1920    1200
		GPC	     2560    1800

		SGTS7+	 2800    1752
		SGTS7	 2560    1600
		SGTS6	 2560    1600
		SGTS5E	 2560    1600
		)

	devices=(
		${phones[@]}
		${tablets[@]}
	)

	resolutions=(
		${monitors[@]}
		${devices[@]}
	)

	printf '\n'

	# set padding for uniform output

	pad_length=10

	# continue list using array selection of suppported values

	for (( i=0 ; i<${#resolutions[@]} ; i+=3 ))
	do
		format="${resolutions[$i]}"
		width="${resolutions[$i+1]}"
		height="${resolutions[$i+2]}"
		resolution="${width}x${height}"

		number=$((($i/3) + 1))

		if (( $i/3 >= 0 && $i/3 <= 8 ))
		then
			# handle number spacing for entries 1-9

			printf '\t[  %s ] %s' ${number} ${format}
		else
			# handle number spacing for entries 10+

			printf '\t[ %s ] %s' ${number} ${format}
		fi

		printf '%*s' $((pad_length - ${#format}))
		printf '%s\n' ${resolution}
	done

	printf '\n'
}


# only show selection list when automatic start file and value are present

if [ -f /home/"${USER}"/.vnc/selection ]
then
	vnc_resolutions > /dev/null
else
	vnc_resolutions
fi

# values #

values_list=(
	selection
)

# manage user input for values_list

console_rtn=()

if [ -f /home/"${USER}"/.vnc/selection ]
then
	selection=$(cat /home/"$USER"/.vnc/selection)
else
	console.input ${values_list[@]}
fi

eval ${console_rtn[@]}

# check selection input against selection list

while true
do
	# range #

	if [[ "${selection}" -lt 1 ]] || [[ "${selection}" -gt "${number}" ]]
	then
		echo
		console.err "Invalid selection:"
		console.wrn "Select a number ranging from [ 1 - ${number} ]"
		console.wrn "or input a [c]ustom display geometry."
		echo

		console.ipt "Selection: "
		read selection
		echo
	else
		break
	fi

	# custom #

	if [[ "${selection}" != "c" ]]
	then
		echo
		console.err "Invalid selection:"
		console.wrn "Input a [c]ustom display geometry"
		console.wrn "or select a number ranging from [ 1 - ${number} ]."
		echo

		console.ipt "Selection: "
		read selection
		echo
	else
		selection=custom

		break
	fi

done

# manage numerical selection

resolution=""

if [[ "${selection}" =~ ^[0-9]+$ ]]
then
	i=$((${selection}))
	i=$(($i*3))

	format="${resolutions[$i-3]}"
	width="${resolutions[$i-2]}"
	height="${resolutions[$i-1]}"
	resolution="${width}x${height}"

	GEOMETRY="${resolution}"

fi

# manage custom selection

if [[ "${selection}" = "custom" ]]
then
	format="Custom"

	console.inf "Setting custom resolution and port:"
	echo

	console.ipt "Enter geometry WIDTH in pixels: "
	read width
	echo

	console.ipt "Enter HEIGHT in pixels: "
	read height
	echo

	console.ipt "Enter port NUMBER (e.g. 1): "
	read custom_port
	echo

	format="Custom"
	custom_resolution="${width}x${height}"

	DISPLAY=":${custom_port}"
	GEOMETRY="${custom_resolution}"
	PORT="590${DISPLAY:1}"
fi

# start vnc display

vnc_start
