#!/bin/bash

# dependencies #

. "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-20-2022"

# usage #

while (($#))
do
	case "${1}"
	in
		-i|--information)
			option="information"
			user_name="${2}"

			shift
		;;

		-u|--username)
			option="username"
			user_name="${2}"

			shift
		;;

		-p|--password)
			option="password"
			user_password="${2}"

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-i, --information    Gather setup information."
			echo -e "-u, --username       Setup user account."
			echo -e "-p, --password       Set or change user password."
			echo
			echo -e "-h, --help           Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;

	esac

	shift
done

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# defaults #

# functions #

generate_password () {
	# generate random password

	echo $(cat /dev/urandom | tr -d -c 'a-zA-Z0-9' | fold -w ${1:-32} | head -n $(echo $((RANDOM % 10 + 1))) | tail -n 1)
	}

add_information () {
	# get 'user' information

	console.inf "This information will be used to set up the user account."
	echo

	console.wrn "Information is required to set up your environment:"
	console.wrn "Fields cannot be empty."
	echo

	# handle user input for information_list

	console_rtn=()

	console.input ${information_list[@]}

	eval ${console_rtn[@]}
}

add_user_interactive () {
	# generate 'user' account:
	# interactive setup

	console.fwd "Generating account..."
	echo

	room_number=""
	work_number=""
	home_number=""

	gecos+="${first_name} ${last_name},"
	gecos+="${room_number},"
	gecos+="${work_number},"
	gecos+="${home_number},"
	gecos+="${user_email}"

	# generate user entry
	# silent configuration:
	# set --gecos and --disabled-password for fully silent execution

	console.wrn "Creating user" "[ ${user_name} ]"
	echo

	# use /dev/null redirection:
	# 'adduser' prevents stdout error redirect - cannot use 'console.silence'

	adduser					\
		--gecos "${gecos}"	\
		--shell "${SHELL}"	\
		--disabled-password "${user_name}" > /dev/null
}

add_user_noninteractive () {
	# generate 'user account:
	# automated setup

	console.fwd "Generating account..."
	echo

	[ -z "${user_name}" ]     && user_name="termux"
	[ -z "${user_password}" ] && user_password=$(generate_password)

	user_name="${user_name}"
	user_id="1000"
	group_id="1000"
	gecos="Dextop"
	home="/home/${user_name}"

	console.wrn "Creating user" "[ ${user_name} ]"
	echo

	echo  "${user_name}:x:${user_id}:${group_id}:${gecos}:${home}:${SHELL}" >> ${PREFIX}/cnt/etc/passwd
}

add_superuser () {
	# generate 'user' superuser privilege

	console.fwd "Generating superuser privilege..."
	echo

	if [[ $(cat /etc/group | grep sudo) ]]
	then
		sudo_id=$(cat /etc/group | grep sudo | cut -d ':' -f 3)
	else
		sudo_id="27"
	fi

	# add 'user' to 'sudo' group

	sed -i '/sudo.*/d' "${PREFIX}"/cnt/etc/group

	echo "sudo:x:${sudo_id}:${user_name}" >> "${PREFIX}"/cnt/etc/group

	# generate sudoers directory

	console.directory  "${PREFIX}"/cnt/etcsudoers.d

	# set superuser privilege password override

	echo "${user_name} ALL=(ALL) NOPASSWD: ALL" > "${PREFIX}"/cnt/etc/sudoers.d/"${user_name}"

	# fix superuser privilege runtime errors

	echo "Set disable_coredump false" >> "${PREFIX}"/cnt/etc/sudo.conf

	# fix ownership on superuser privilege password override

	chmod 0440 "${PREFIX}"/cnt/etc/sudoers.d/"${user_name}"
}

add_password () {
	# generate 'user' password

	console.fwd "Setting password..."
	echo

	# generate password credential for 'user' entry

	# silent configuration:
	# use 'chpasswd' to append user password to account

	chpasswd <<< "${user_name}:${user_password}"
}

add_runtime () {
	# generate 'user' runtime directory structure

	console.fwd "Setting runtime..."
	echo

	user_uid="$(id -u ${user_name})"
	user_gid="$(id -g ${user_name})"

	# generate runtime directory

	console.directory "${PREFIX}"/cnt/run/user "${user_uid}"
	console.directory "${PREFIX}"/cnt/run/user "${user_name}"

	# set runtime directory permissions

	chmod 700 /run/user/"${user_uid}"
	chmod 700 /run/user/"${user_name}"

	# set runtime directory ownership

	chown "${user_uid}":"${user_gid}" -R "${PREFIX}"/cnt/run/user/"${user_uid}"
	chown "${user_uid}":"${user_gid}" -R "${PREFIX}"/cnt/run/user/"${user_name}"
}

if [ "${option}" = "information" ]
then
	[ -z "${user_name}" ]     && information_list+=(user_name)
	[ -z "${first_name}" ]    && information_list+=(first_name)
	[ -z "${last_name}" ]     && information_list+=(last_name)
	[ -z "${user_email}" ]    && information_list+=(user_email)
	[ -z "${user_password}" ] && information_list+=(user_password)

	add_information

	export user_name="${user_name}"
	export first_name="${first_name}"
	export last_name="${last_name}"
	export user_email="${user_email}"
	export user_password="${user_password}"
fi

if [ "${option}" = "password" ]
then
	[ -z "${user_password}" ] && information_list+=(user_password)

	add_information

	add_password
fi

if [ "${option}" = "username" ]
then
	[ -z "${user_name}" ]     && information_list+=(user_name)
	[ -z "${first_name}" ]    && information_list+=(first_name)
	[ -z "${last_name}" ]     && information_list+=(last_name)
	[ -z "${user_email}" ]    && information_list+=(user_email)
	[ -z "${user_password}" ] && information_list+=(user_password)

	add_information

	# generate 'user' account: interactive

	add_user_interactive
else
	# generate 'user' account: noninteractive

	add_user_noninteractive
fi

add_password

add_superuser

add_runtime
