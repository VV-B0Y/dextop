#!/bin/bash

# dependencies #

. "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-u|--username)
			user_name="${2}"

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} | [User Name]"
			echo
			echo -e "Options:"
			echo
			echo -e "-r, --root        Specify 'root' as user for session login."
			echo -e "-u, --username    Specify 'user' for session login."
			echo
			echo -e "-h, --help        Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

			"")
				# handle empty argument:
				# use default values specified in script

				:
			;;

		*)
			echo
			echo -e "Usage: ${script} | [User Name]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
		
	esac

	shift
done

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# verify user existence:
# loop through container's /etc/passwd and make sure 'user' exists
# and corresponds to 'username' then source environment variables from file
# default to 'root' if 'username' is invalid, not specified or does not exist

last_entry="$(tail -n 1 "${PREFIX}"/cnt/etc/passwd)"

# authentication #

console.fwd "Authenticating..."
echo

while read -r entry
do
	IFS=':'

	read USER _ USER_ID GROUP_ID GECOS HOME SHELL <<< "${entry}"

	IFS=','

	read FULL_NAME ROOM_NUMBER WORK_PHONE HOME_PHONE USER_EMAIL <<< "${GECOS}"

	# reset IFS

	IFS=' '

	# messages:
	# verify login options and parameters
	
	if [[ -z "${user_name}" ]]
	then
		user_name="root"

		console.wrn "No user name - Defaulting" "[ '${user_name}' ]"
		echo

		# break out of loop - empty "${user_name}" - default to 'root'

		break
	fi

	if [[ "${user_name}" == "${USER}" ]]
	then
		user_name="${USER}"

		console.scs "Valid user name" "[ '${user_name}' ]"
		echo

		# break out of loop - matching "${user_name}"

		break
	fi

	if [[ "${entry}" == "${last_entry}" ]]
	then
		user_name="root"

		console.err "Invalid user name - Defaulting" "[ '${user_name}' ]"
		echo
	fi

	# specify login defaults

	if [[ -z "${user_name}" ]] || [[ "${entry}" == "${last_entry}" ]]
	then
		USER="root"
		USER_ID=0
		GROUP_ID=0
		FULL_NAME="root"
		HOME="/root"
		session_name="CONSOLE"
		SHELL="/bin/bash"
	fi

done < "${PREFIX}"/cnt/etc/passwd

# system #

# explicit 'proot' command setup defaults:
# used to specify the desktop session:
# login format / environment /pathnv'

# set path:
# in order of retreival

PATH=""

# container

[ -d "${PREFIX}"/cnt/usr/local/sbin ]											&& PATH+="/usr/local/sbin:"
[ -d "${PREFIX}"/cnt/usr/local/bin ]											&& PATH+="/usr/local/bin:"
[ -d "${PREFIX}"/cnt/usr/sbin ]													&& PATH+="/usr/sbin:"
[ -d "${PREFIX}"/cnt/usr/sbin ]													&& PATH+="/usr/bin:"
[ -d "${PREFIX}"/cnt/sbin ]														&& PATH+="/sbin:"
[ -d "${PREFIX}"/cnt/bin ]														&& PATH+="/bin:"

# termux

[ -d "${PREFIX}"/sbin ]															&& PATH+="${PREFIX}/sbin:"
[ -d "${PREFIX}"/bin ]															&& PATH+="${PREFIX}/bin:"

# android

[ -d /system/sbin ]																&& PATH+="/system/sbin:"
[ -d /system/bin ]																&& PATH+="/system/bin:"

PATH="${PATH}"

# set environment

COLORTERM="truecolor"
DISPLAY=":1"
LANG="C.UTF-8"
LOCALHOST="127.0.0.1"
SHELL="/bin/bash"

# i3 #

[ -f "${PREFIX}"/cnt/usr/bin/i3 ] && session_name="I3WM" || session_name="CONSOLE"

# xfce #

[ -f "${PREFIX}"/cnt/usr/bin/xfwm4 ] && session_name="XFCE" || session_name="CONSOLE"

# defaults #

console.fwd "Starting session" "[ ${session_name} // ${user_name} ]"
echo

# assume 'termux-exec' is installed

unset LD_PRELOAD

# setup 'proot' command arguments

unset session_command

session_command+="proot"
session_command+=" --kill-on-exit"
session_command+=" --link2symlink"
session_command+=" --rootfs=${PREFIX}/cnt"
session_command+=" --change-id=${USER_ID}:${GROUP_ID}"
session_command+=" --pwd=${HOME}"
[ -d "/apex" ]                       && session_command+=" --bind=/apex:/apex"
[ -d "/data" ]                       && session_command+=" --bind=/data:/data"
[ -d "/dev" ]                        && session_command+=" --bind=/dev:/dev"
[ -e "/dev/urandom" ]                && session_command+=" --bind=/dev/urandom:/dev/random"
[ -e "/linkerconfig/ld.config.txt" ] && session_command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"
[ -f "/plat_property_contexts" ]     && session_command+=" --bind=/plat_property_contexts:/plat_property_contexts"
[ -f "/property_contexts" ]          && session_command+=" --bind=/property_contexts:/property_contexts"
[ -d "/proc" ]                       && session_command+=" --bind=/proc:/proc"
[ -d "/proc/self/fd" ]               && session_command+=" --bind=/proc/self/fd:/dev/fd"
[ -e "/proc/self/fd/0" ]             && session_command+=" --bind=/proc/self/fd/0:/dev/stdin"
[ -e "/proc/self/fd/1" ]             && session_command+=" --bind=/proc/self/fd/1:/dev/stdout"
[ -e "/proc/self/fd/2" ]             && session_command+=" --bind=/proc/self/fd/2:/dev/stderr"
[ -d "/storage" ]                    && session_command+=" --bind=/storage:/storage"
[ -d "/sys" ]                        && session_command+=" --bind=/sys:/sys"
[ -d "/system" ]                     && session_command+=" --bind=/system:/system"
[ -d "/vendor" ]                     && session_command+=" --bind=/vendor:/vendor"
[ -d "${PREFIX%/*}"/home ]           && session_command+=" --bind=${PREFIX%/*}/home:/home/${USER}"
[ -d "${PREFIX}"/storage/external ]  && session_command+=" --bind=${PREFIX}/storage/external:/media/external"
[ -d "${PREFIX}"/storage/internal ]  && session_command+=" --bind=${PREFIX}/storage/internal:/media/internal"
[ -x "${PREFIX}"/bin/htop ]          && session_command+=" --bind=${PREFIX}/bin/top:/usr/bin/htop"
[ -x "${PREFIX}"/bin/kill ]          && session_command+=" --bind=${PREFIX}/bin/kill:/usr/bin/kill"
[ -x "${PREFIX}"/bin/pgrep ]         && session_command+=" --bind=${PREFIX}/bin/pgrep:/usr/bin/pgrep"
[ -x "${PREFIX}"/bin/pkill ]         && session_command+=" --bind=${PREFIX}/bin/pkill:/usr/bin/pkill"
[ -x "${PREFIX}"/bin/ps ]            && session_command+=" --bind=${PREFIX}/bin/ps:/usr/bin/ps"
[ -x "${PREFIX}"/bin/top ]           && session_command+=" --bind=${PREFIX}/bin/top:/usr/bin/top"
session_command+=" env -i"
session_command+=" ANDROID_ART_ROOT=${ANDROID_ART_ROOT}"
session_command+=" ANDROID_DATA=${ANDROID_DATA}"
session_command+=" ANDROID_I18N_ROOT=${ANDROID_I18N_ROOT}"
session_command+=" ANDROID_ROOT=${ANDROID_ROOT}"
session_command+=" ANDROID_RUNTIME_ROOT=${ANDROID_RUNTIME_ROOT}"
session_command+=" ANDROID_TZDATA_ROOT=${ANDROID_TZDATA_ROOT}"
session_command+=" BOOTCLASSPATH=${BOOTCLASSPATH}"
session_command+=" DEX2OATBOOTCLASSPATH=${DEX2OATBOOTCLASSPATH}"
session_command+=" PREFIX=${PREFIX}"
session_command+=" COLORTERM=${COLORTERM}"
session_command+=" DISPLAY=${DISPLAY}"
session_command+=" HOME=${HOME}"
session_command+=" LANG=${LANG}"
session_command+=" LOCALHOST=${LOCALHOST}"
session_command+=" PATH=${PATH}"
session_command+=" SHELL=${SHELL}"
session_command+=" TERM=${TERM}"
session_command+=" TMPDIR=${TMPDIR}"
session_command+=" USER=${USER}"
session_command+=" XDG_RUNTIME_DIR=/run/user/${USER_ID}"
session_command+=" XDG_CONFIG_DIRS=/etc/xdg"
session_command+=" XDG_CACHE_HOME=${HOME}/.cache"
session_command+=" XDG_CONFIG_HOME=${HOME}/.config"
session_command+=" XDG_DATA_HOME=${HOME}/.local/share"
session_command+=" XDG_STATE_HOME=${HOME}/.local/state"
session_command+=" XDG_DATA_DIRS=/usr/local/share:/usr/share"
session_command+=" XAUTHORITY=${XDG_RUNTIME_DIR}/Xauthority"
session_command+=" ${SHELL} --login"

# execute 'proot'

exec ${session_command}