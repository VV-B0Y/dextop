#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="02-07-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

# aliases #

console.inf "Writing command aliases."
echo

cat << 'FILE' -> "${ROOT_DIRECTORY}"/home/"${user_name}"/.bash_aliases
# shell #

[[ $(id -u) = 0 ]] && PS1="$(tput setaf 1)>_ # $(tput sgr 0)" || PS1=">_ $ "

# sudo #

alias sudo='sudo -p "$(tput setaf 3)>_ ? $(tput sgr 0)"'

# directories #

alias '..'='cd ..'
alias '...'='cd ../../../'
alias '....'='cd ../../../../'
alias '.....'='cd ../../../../'

alias 'hd'='cd "${HOME}"'
alias 'rd'='cd /'

alias 'directory'='echo ${PWD}'

# files #

alias 'count'='find . -type f | wc -l'

# list #

alias 'ls'='ls -a -c -h -l --color=auto --group-directories-first'

# apt-get #

alias 'autoclean'='sudo apt-get autoclean'
alias 'autoremove'='sudo apt-get autoremove'
alias 'check'='sudo apt-get check'
alias 'clean'='sudo apt-get clean'
alias 'distribution-upgrade'='sudo apt-get dist-upgrade'
alias 'download'='sudo apt-get download'
alias 'install'='sudo apt-get install'
alias 'purge'='sudo apt-get purge'
alias 'reinstall'='sudo apt-get reinstall'
alias 'repair'='sudo apt-get -f install'
alias 'remove'='sudo apt-get remove'
alias 'update'='sudo apt-get update'
alias 'upgrade'='sudo apt-get upgrade'

# apt-cache #

alias 'dependencies'='apt-cache depends'
alias 'search'='apt-cache search'

# cp #

alias 'cp'='rsync -a -r --progress -h'

# dd #

alias 'dd'="dd if=${1} of=${2} bs=${3} status=progress"

# du #

alias 'usage'='du -a -d 1 -h -S --time 2> /dev/null | sort -n -r'

# dpkg #

alias 'd-install'='sudo dpkg -i'
alias 'd-force-install'='sudo dpkg -i --force-all'

# git #

alias 'gc'='git clone'
alias 'gi'='git init'
alias 'gp'='git pull'

alias 'ga'='git add *'
alias 'gm'="git commit -a -m ${1}"
alias 'gs'='git push'

alias 'gu'='ga && gm "Code & Features Update" && gs'

# kill #

alias 'kill'="sudo pkill -9 ${1}"

# nano #

alias 'nano'='nano -c -g -i -l -m -D -F -J80 -T4'

# ping #

alias 'ping'='ping -c 5'

# services #

alias 'kill'='sudo pkill -9'
alias 'start'='sudo systemctl start'
alias 'stop'='sudo systemctl stop'
alias 'enable'='sudo systemctl enable'
alias 'disable'='sudo systemctl disable'
alias 'status'='sudo systemctl status'

# ip #

alias 'address'='curl ipinfo.io/ip'

# weather #

alias 'weather'='curl wttr.in'

# speedtest #

speedtest () {
	[ -z "$(command -v speedtest-cli)" ] && console.install speedtest-cli || :

	speedtest-cli			\
		--server 2406		\
		--simple
}

# youtube-dl #

youtube () {
	[ -z "$(command -v youtube-dl)" ] && console.install youtube-dl || :

	path="${2}"

	[ -z "${path}" ] && path="${PWD}"
	cd "${path}" || exit 1

	youtube-dl												\
		--ignore-errors										\
		--yes-playlist										\
		--extract-audio										\
		--format		bestaudio							\
		--audio-format		mp3								\
		--audio-quality		160K							\
		--output		"%(title)s.%(ext)s"					\
															${1}
}

# recordmydesktop #

record () {
	[ -z "$(command -v recordmydesktop)" ] && console.install recordmydesktop || :

	[ -f "${HOME}"/Videos ] && path="${HOME}"/Videos || path="${HOME}"

	stamp="$(date +"%m-%d-%Y-%H-%M-%S")"
	window_id="$(xwininfo | grep "Window id" | cut -d ' ' -f 4)"

	wmctrl -i -R "${window_id}"

	console.wait 1

	recordmydesktop											\
		--no-cursor											\
		--no-wm-check										\
		--no-sound											\
		--overwrite											\
		--windowid "${window_id}"							\
		--output="${path}"/clip-"${stamp}".ogv
}

# extract #

extract () {
	if [ -f "${1}" ]
	then
		case "${1}" in
			*.tar.bz2)
				tar xjf "${1}"
			;;

			*.tar.gz)
				tar xzf "${1}"
			;;

			*.bz2)
				bunzip2 "${1}"
			;;

			*.rar)
				unrar e "${1}"
			;;

			*.gz)
				gunzip "${1}"
			;;

			*.tar)
				tar xf "${1}"
			;;

			*.tbz2)
				tar xjf "${1}"
			;;

			*.tgz)
				tar xzf "${1}"
			;;

			*.zip)
				unzip "${1}"
			;;

			*.Z)
				uncompress "${1}"
			;;

			*.7z)
				7z x "${1}"
			;;

			*)
				echo
				echo -e "'${1}' cannot be extracted:"
				echo -e "Unknown or unsupported archive type."
				echo

				exit 1
			;;
		esac
	else
		echo
		echo -e "'${1}' is not a valid archive type."
		echo

		exit 1
	fi
}

# sprunge #

sprunge () {
	if (($#))
	then
		curl -F 'sprunge=<-' http://sprunge.us < "${1}"
	else
		curl -F 'sprunge=<-' http://sprunge.us
	fi
}
FILE
