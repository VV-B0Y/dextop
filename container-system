#!/bin/bash

# dependencies #

. /data/data/com.termux/files/usr/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-22-2021"

# usage #

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# defaults #

# functions #

add_environment () {
	# generate environment '$PATH'

	# set path:
	# in order of retreival

	PATH=""

	# container

	[ -d "${PREFIX}"/cnt/usr/local/sbin ]								&& PATH+="/usr/local/sbin:"
	[ -d "${PREFIX}"/cnt/usr/local/bin ]								&& PATH+="/usr/local/bin:"
	[ -d "${PREFIX}"/cnt/usr/sbin ]									&& PATH+="/usr/sbin:"
	[ -d "${PREFIX}"/cnt/usr/sbin ]									&& PATH+="/usr/bin:"
	[ -d "${PREFIX}"/cnt/sbin ]										&& PATH+="/sbin:"
	[ -d "${PREFIX}"/cnt/bin ]											&& PATH+="/bin:"

	# termux

	[ -d "${PREFIX}"/sbin ]														&& PATH+="${PREFIX}/sbin:"
	[ -d "${PREFIX}"/bin ]														&& PATH+="${PREFIX}/bin:"

	# android

	[ -d /system/sbin ]															&& PATH+="/system/sbin:"
	[ -d /system/bin ]															&& PATH+="/system/bin:"

	# set environment

	echo "PATH=${PATH}"															> "${PREFIX}"/cnt/etc/environment
}

add_groups () {
	# register android groups to container

	# set IFS

	IFS=' '

	# read android system IDs

	read uid gid groups <<< $(id)

	uid=${uid/uid=}
	gid=${gid/gid=}
	groups=${groups/groups=}

	# set IFS

	IFS=','

	# parse existing groups

	read -r -a groups_list <<< "${groups}"

	for line in "${groups_list[@]}"
	do
		line=${line/(/ }
		line=${line/)}

		# set IFS

		IFS=' '

		# transfer unregistered IDs

		read group_number group_name <<< ${line}

		[ -f "${PREFIX}"/cnt/etc/group ]   && echo "${group_name}:x:${group_number}:" >> "${PREFIX}"/cnt/etc/group
		[ -f "${PREFIX}"/cnt/etc/gshadow ] && echo "${group_name}:x:${group_number}:" >> "${PREFIX}"/cnt/etc/gshadow

	done

	# reset IFS

	IFS=''
}

add_network () {
	# generate network files

	# hostname

	echo '${HOSTNAME}'															> "${PREFIX}"/cnt/etc/hostname

	# hosts

	echo '# IPv4 #'																>  "${PREFIX}"/cnt/etc/hosts

	echo '127.0.0.1	localhost.localdomain'										>> "${PREFIX}"/cnt/etc/hosts
	echo '127.0.0.1	localhost'													>> "${PREFIX}"/cnt/etc/hosts

	echo '# IPv6 #'																>> "${PREFIX}"/cnt/etc/hosts

	echo '::1			localhost.localdomain'									>> "${PREFIX}"/cnt/etc/hosts
	echo '::1			localhost'												>> "${PREFIX}"/cnt/etc/hosts
	echo '::1			ip6-localhost'											>> "${PREFIX}"/cnt/etc/hosts
	echo '::1			ip6-loopbak'											>> "${PREFIX}"/cnt/etc/hosts
	echo 'fe00::0		ip6-localnet'											>> "${PREFIX}"/cnt/etc/hosts
	echo 'fe00::0		ip6-mcastprefix'										>> "${PREFIX}"/cnt/etc/hosts
	echo 'ff02::1		ip6-allnodes'											>> "${PREFIX}"/cnt/etc/hosts
	echo 'ff02::2		ip6-allrouters'											>> "${PREFIX}"/cnt/etc/hosts
	echo 'ff02::3		ip6-allhosts'											>> "${PREFIX}"/cnt/etc/hosts

	# nameserver

	echo 'nameserver 1.1.1.1'													>  "${PREFIX}"/cnt/etc/resolv.conf
	echo 'nameserver 1.0.0.1'													>> "${PREFIX}"/cnt/etc/resolv.conf
}

add_preload () {
	# generate libgcc/libc location and add to preload dynamic linker

	preload_location=$(find "${PREFIX}"/cnt -type f -iname libgcc_s.so.1)
	preload_library="${preload_path/$"${PREFIX}"/cnt/}"

	# set preload

	echo "${preload_library}"													> "${PREFIX}"/cnt/etc/ld.so.preload
}

# generate environment variables

add_environment

# generate missing groups

add_groups

# generate network

add_network

# generate preload entries

add_preload