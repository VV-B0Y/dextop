#!/bin/bash

# dependencies #

. /data/data/com.termux/files/usr/bin/console
. /data/data/com.termux/files/usr/bin/dextop

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
		
	esac

	shift
done

# prompt #

console.script "Setting up shell [ ${script%-*} ]"
echo

# variables #

# set defaults

# .bash_aliases

cat << 'FILE' -> "${HOME_DIRECTORY}"/.bash_aliases

if [ -d "${HOME}"/.bash-aliases ]
then
	for alias in "${HOME}"/.bash-aliases/*
	do
		test -x "${alias}" && . "${alias}"
	done
fi
FILE

# .bash functions

cat << 'FILE' -> "${HOME_DIRECTORY}"/.bash_functions

if [ -d "${HOME}"/.bash-functions ]
then
	for function in "${HOME}"/.bash-functions/*
	do
		test -x "${function}" && . "${function}"
	done
fi
FILE

# .bash_logout

cat << 'FILE' -> "${HOME_DIRECTORY}"/.bash_logout

FILE

# .bashrc

cat << 'FILE' -> "${HOME_DIRECTORY}"/.bashrc

# check for interactive session

[ -z "$PS1" ] && return

# set shell options

shopt -s checkwinsize
shopt -s histappend
shopt -s histverify

HISTCONTROL=ignoreboth
HISTSIZE=1000
HISTFILESIZE=2000

# bash completion

if [ ! $(shopt -oq posix) ]
then
	if [ -f /usr/share/bash-completion/bash_completion ]
	then
		. /usr/share/bash-completion/bash_completion

	elif [ -f /etc/bash_completion ]
	then
		. /etc/bash_completion
	fi
fi

# command not found

if [ -x /usr/lib/command-not-found ] || [ -x /usr/share/command-not-found/command-not-found ]
then
	command_not_found_handle () {
		if [ -x /usr/lib/command-not-found ]
		then
			/usr/lib/command-not-found -- "${1}"

			return $?

		elif [ -x /usr/share/command-not-found/command-not-found ]
		then
			/usr/share/command-not-found/command-not-found -- "${1}"

			return $?
		else
			printf "%s: command not found\n" "${1}" >&2

			return 127
		fi
	}
fi

# prompt string

# ansi colors escape setup using 'tput'

black="\001$(tput setaf 0)\002"
red="\001$(tput setaf 1)\002"
green="\001$(tput setaf 2)\002"
yellow="\001$(tput setaf 3)\002"
blue="\001$(tput setaf 4)\002"
magenta="\001$(tput setaf 5)\002"
cyan="\001$(tput setaf 6)\002"
white="\001$(tput setaf 7)\002"

reset="\001$(tput sgr 0)\002"

[ -z "${USER}" ] && USER="termux"

unset PS1

[[ $(id -u) = 0 ]] && PS1+="${reset}[ "				|| PS1+="${reset}[ "
[[ $(id -u) = 0 ]] && PS1+="${red}${USER}"			|| PS1+="${green}${USER}"
[[ $(id -u) = 0 ]] && PS1+="${reset} ]"				|| PS1+="${reset} ]"
[[ $(id -u) = 0 ]] && PS1+="${white} >_ # ${reset}"	|| PS1+="${white} >_ $ ${reset}"

# bash aliases

if [ -f "${HOME}"/.bash_aliases ]
then
	. "${HOME}"/.bash_aliases
fi

# bash functions

if [ -f "${HOME}"/.bash_functions ]
then
	. "${HOME}"/.bash_functions
fi
FILE

# .profile

cat << 'FILE' -> "${HOME_DIRECTORY}"/.profile

# bashrc

if [ -n "${BASH_VERSION}" ]
then
	if [ -f "${HOME}"/.bashrc ]
	then
		. "${HOME}"/.bashrc
	fi
fi

# paths

if [ -d "${HOME}"/bin ]
then
	PATH="${HOME}/bin:${PATH}"
fi

if [ -d "${HOME}"/.local/bin ]
then
	PATH="${HOME}/.local/bin:${PATH}"
fi
FILE

# copy shell files to root account home:
# make all customizations and commands available

# files list #

shell_files_list=(
	.bash_aliases
	.bash_functions
	.bash_logout
	.bashrc
	.profile
)

# copy #

for shell_file in ${shell_files_list[@]}
do
	cp "${HOME_DIRECTORY}"/"${shell_file}" /root/"${shell_file}"
done