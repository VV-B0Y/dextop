image_archive () {
	# archive previous deployments to backup directory

	# set IFS

	IFS='$\n'

	deployments_list=()

	for deployment in $(ls "${IMAGE_DIRECTORY}")
	do
		deployments_list+=("${deployment}")
	done

	unset deployment

	# reset IFS

	IFS=''

	console.inf "Number of deployments found" "[ ${#deployments_list[@]} ]"
	echo

	console.ipt "Select deployment to archive:"
	echo

	printf '\n'

	# print numbered list for selection

	for (( i=0 ; i<${#deployments_list[@]} ; i++ ))
	do
		number=$(($i + 1))

		if (( $i >= 0 && $i <=8 ))
		then
			# handle number spacing for entries 1-9

			printf '\t[  %s ] %s \n' ${number} ${deployments_list[i]}
		else
			# handle number spacing for entries 10+

			printf '\t[ %s ] %s \n' ${number} ${deployments_list[i]}
		fi
	done

	printf '\n'

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	console_rtn=()

	console.input ${values_list[@]}

	eval ${console_rtn[@]}

	# verify selection input against selection list

	while true
	do
		# range #

		if [[ "${selection}" -lt 1 ]] || [[ "${selection}" -gt "${number}" ]]
		then
			echo
			console.err "Invalid selection:"
			console.wrn "Select a number ranging from [ 1 - ${number} ]"
			echo

			console.ipt "Selection:"

			read selection
			echo
		else
			# handle numerical selection

			i=$((${selection} - 1))

			deployment=${deployments_list[i]}

			# define archiving variables

			CONTAINER_DIRECTORY="${IMAGE_DIRECTORY}/${deployment}"

			console.fwd "Archiving" "[ ${deployment} ]"
			echo

			break
		fi
	done

	# archive routine

	tar												\
		--create									\
		--verbose									\
		--gzip										\
		--preserve-permissions						\
			--file="${BACKUP_DIRECTORY}/${1}"		\
			--exclude="${CONTAINER_DIRECTORY}/${1}"		\
			--one-file-system "${CONTAINER_DIRECTORY}"	|| :
}

image_restore () {
	# restore backed up deployment to image directory

	IFS='$\n'

	archives_list=()

	for archive_selection in $(ls "${BACKUP_DIRECTORY}")
	do
		archive_label="${archive_selection##*/}"

		# set IFS

		IFS='-'

		read archive_distribution archive_release month day year hour minute second archive_tail <<< "${archive_label}"

		# reset IFS

		IFS=''

		archives_list+=("${archive_label}")
	done

	# reset IFS

	IFS=''

	console.inf "Number of archives found: ${#archives_list[@]}"
	echo

	console.ipt "Select archive to restore:"
	echo

	printf '\n'

	# print numbered list for selection

	for (( i=0 ; i<${#archives_list[@]} ; i++ ))
	do
		archives_directory="${archives_list[$i]}"

		number=$(($i + 1))

		if (( $i >= 0 && $i <=8 ))
		then
			# handle number spacing for entries 1-9

			printf '\t[  %s ] %s\n' ${number} ${archives_list[i]}
		else
			# handle number spacing for entries 10+

			printf '\t[ %s ] %s\n' ${number} ${archives_list[i]}
		fi
	done

	printf '\n'

	# values #

	values_list=(
		selection
	)

	# handle user input for values_list

	console_rtn=()

	console.input ${values_list[@]}

	eval ${console_rtn[@]}

	# verify selection input against selection list

	while true
	do
		# range #

		if [[ "${selection}" -lt 1 ]] || [[ "${selection}" -gt "${number}" ]]
		then
			echo
			console.err "Invalid selection:"
			console.wrn "Select a number ranging from [ 1 - ${number} ]"
			echo

			console.ipt "Selection:"
			
			read selection
			echo
		else

		# handle numerical selection

			i=$((${selection}))

			archive=${deployments_list[i]}
			archive_stamp="${month}-${day}-${year}-${hour}-${minute}-${second}"

			deployment="${archive_distribution}/${archive_release}"

			# define archiving variables

			CONTAINER_DIRECTORY="${IMAGE_DIRECTORY}/${deployment}"

			console.fwd "Restoring" "[ ${deployment} // ${archive_stamp} ]"
			echo

			break
		fi
	done

	exit

	console.inf "Extracting deployment archive [ ${archive_selection} ]."
	echo

	# restore routine

	tar										\
		--extract							\
			--file="${archive_selection}"	\
			--directory="${CONTAINER_DIRECTORY}"
}

image_wipe () {
	# wipe image directory contents

	console.wrn "Wiping existing deployment(s)."
	echo

	rm -rf "${IMAGE_DIRECTORY}"/*
}

image_rename () {
	# rename same distribution/release directory contents

	console.inf "Renaming deployment(s)."

	mv "${deployment}" "${deployment}-${stamp}"
}

image_deployments () {
	# look for existing deployments

	# set IFS

	IFS='$\n'

	for deployment in $(ls "${IMAGE_DIRECTORY}")
	do
		deployments_list+=("${deployment}")
	done

	# reset IFS

	IFS=''

	if [ ${#deployments_list[@]} -eq 0 ]
	then
		console.wrn "No existing deployment(s) found" "[ ${IMAGE_DIRECTORY} // ${#deployments_list[@]} ]"
		echo

		console.fwd "Proceeding..."
		echo
	fi

	if [ ${#deployments_list[@]} -ge 1 ]
	then
		console.wrn "Existing deployment(s) found" "[ ${IMAGE_DIRECTORY} // ${#deployments_list[@]} ]"
		echo

		if [ ${#deployments_list[@]} -eq 1 ]
		then
			if [[ "${deployment}" == "${distribution_name}-${distribution_release}" ]]
			then
				console.err "Existing deployment matches setup selection."
				echo

				console.ask "Rename deployment?"

				read reply
				echo

				if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
				then
					image_rename

					unset reply

				elif [[ "${reply}" = [nN] ]] || [[ "${reply}" = [nN][oO] ]]
				then
					console.ask "Archive deployment?"

					read reply
					echo

					if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
					then
						image_archive "${distribution_name}-${distribution_release}-${stamp}-backup.tar.gz"

						rm -rf "${IMAGE_DIRECTORY}"/"${deployment}"

						unset reply

					elif [[ "${reply}" = [nN] ]] || [[ "${reply}" = [nN][oO] ]]
					then
						console.ask "Wipe image directory?"
						echo

						read reply
						echo

						if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
						then
							image_wipe

							unset reply

						elif [[ "${reply}" = [nN] ]] || [[ "${reply}" = [nN][oO] ]]
						then
							console.err "Unable to deploy system image with current set of options."
							echo

							console.fwd "Aborting..."
							echo

							exit 1
						fi
					fi
				fi
			fi
		fi
	fi
}