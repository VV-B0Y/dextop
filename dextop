#!/bin/bash

# dependencies #

[[ -z $(command -v console) ]] && curl -s -L get.trmnl.me/console/console > "${PREFIX}"/bin/console

. "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-21-2022"

# usage #

while (($#))
do
	case "${1}"
	in
		-x|--xfce)
			option="xfce"
		;;

		-c|--console)
			option="console"
		;;

		-u|--update)
			option="update"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-x, --xfce       Setup XFCE desktop environment and utilities."
			echo -e "-c, --console    Setup Console access to environment and utilities."
			echo
			echo -e "-u, --update     Update Termux application packages. [ F-Droid ]"
			echo
			echo -e "-h, --help       Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear #

console.clear

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

export option="${option}"

# defaults #

[ -z "${option}" ] && option="xfce" && console.write "${option}" "${HOME}"/.dextop dextop-option

# functions #

container_setup () {
	# run container setup commands through 'proot'

	ROOT=$(find ${PREFIX}/cnt -maxdepth 2 -mindepth 0 -type d | grep -i -E 'ubuntu|fedora' | tail -n 1)

	export ROOT="${ROOT}"

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# run as 'root' with default system parameters

	unset container_command

	container_command+="proot"
	container_command+=" --kill-on-exit"
	container_command+=" --link2symlink"
	container_command+=" --rootfs=${ROOT}"
	container_command+=" --change-id=0:0"
	container_command+=" --pwd=/root"
	container_command+=" --bind=/apex:/apex"
	container_command+=" --bind=/data:/data"
	container_command+=" --bind=/dev:/dev"
	container_command+=" --bind=/dev/urandom:/dev/random"
	container_command+=" --bind=/proc:/proc"
	container_command+=" --bind=/proc/self/fd:/dev/fd"
	container_command+=" --bind=/proc/self/fd/0:/dev/stdin"
	container_command+=" --bind=/proc/self/fd/1:/dev/stdout"
	container_command+=" --bind=/proc/self/fd/2:/dev/stderr"
	container_command+=" --bind=/storage:/storage"
	container_command+=" --bind=/sys:/sys"
	container_command+=" --bind=/system:/system"
	container_command+=" --bind=/vendor:/vendor"
	container_command+=" /usr/bin/env -i"
	container_command+=" PREFIX=/data/data/com.termux/files/usr"
	container_command+=" PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PREFIX}/bin:"
	container_command+=" HOME=/data/data/com.termux/files/home"
	container_command+=" LANG=C.UTF-8"
	container_command+=" TERM=${TERM}"
	container_command+=" ${@}"

	${container_command}
}

settings_intent () {
	# reload termux settings

	unset settings_command

	settings_command+="am broadcast"
	settings_command+=" --user 0"
	settings_command+=" -a com.termux.app.reload_style"
	settings_command+=" com.termux"

	console.silence "exec ${settings_command}"
}

# run failsafe package install:
# termux package servers are sometimes unresponsive or badly authenticated

console.fwd "Please wait..."
echo

while [[ -z $(command -v proot) ]]
do
	bash -c 'yes | apt-get update'        >> /dev/null 2>&1
	bash -c 'yes | apt-get upgrade'       >> /dev/null 2>&1
	bash -c 'yes | apt-get install proot' >> /dev/null 2>&1
	bash -c 'yes | apt-get update'        >> /dev/null 2>&1
done

# in order of execution

if [ ! -f "${HOME}"/.dextop/dextop-setup-checkpoint ]
then
	#  utilities

	if [ ! -f "${HOME}"/.dextop/dextop-utilities-checkpoint ]
	then
		utilities_list+=(
			termux-directories
			termux-packages
			termux-repositories
			termux-storage
			termux-update
			container-expansion
			container-image
			container-packages
			container-repositories
			container-session
			container-settings
			container-user
		)

		console.download get.dxtp.app "${PREFIX}"/bin ${utilities_list[@]}

		console.file "${HOME}"/.dextop dextop-utilities-checkpoint
	fi

	# directories

	if [ ! -f "${HOME}"/.dextop/dextop-directories-checkpoint ]
	then
		# add system directories

		directories_list+=(
			bkp
			cnt
			img
			mnt
			media
			storage
		)

		console.directory "${PREFIX}" ${directories_list[@]}

		directories_list=()

		# add home directories

		directories_list+=(
			Desktop
			Documents
			Downloads
			Music
			Pictures
			Public
			Templates
			Videos
		)

		console.directory "${HOME}" ${directories_list[@]}

		directories_list=()

		# generate root directory structure

		directories_list+=(
			bin
			bkp
			cnt
			etc
			img
			lib
			mnt
			opt
			tmp
			media
			storage
		)

		console.link "${PREFIX}" "${PREFIX%/*}" ${directories_list[@]}

		directories_list=()

		console.file "${HOME}"/.dextop dextop-directories-checkpoint
	fi

	# termux

	if [ ! -f "${HOME}"/.dextop/dextop-termux-checkpoint ]
	then
		if [ "${option}" = "update" ]
		then
			"${PREFIX}"/bin/termux-update
		fi

		"${PREFIX}"/bin/termux-directories
		"${PREFIX}"/bin/termux-storage
		"${PREFIX}"/bin/termux-repositories
		"${PREFIX}"/bin/termux-packages

		console.file "${HOME}"/.dextop dextop-termux-checkpoint
	fi

	# image

	if [ ! -f "${HOME}"/.dextop/dextop-image-checkpoint ]
	then
		"${PREFIX}"/bin/container-image

		console.file "${HOME}"/.dextop dextop-image-checkpoint
	fi

	# container

	if [ ! -f "${HOME}"/.dextop/dextop-container-checkpoint ]
	then
		container_setup "${PREFIX}"/bin/container-expansion
		container_setup "${PREFIX}"/bin/container-repositories
		container_setup "${PREFIX}"/bin/container-packages
		container_setup "${PREFIX}"/bin/container-user

		console.file "${HOME}"/.dextop dextop-container-checkpoint
	fi

	# additions

	if [ ! -f "${HOME}"/.dextop/dextop-additions-checkpoint ]
	then
		# termux #

		files_list+=(
			termux
			termux-browser
			termux-chrome
			termux-email
			termux-gmail
			termux-information
			termux-message
			termux.properties
			colors.properties
		)

		console.download get.trmnl.me/termux "${PREFIX}"/bin ${files_list[@]}

		console.link "${PREFIX}"/bin "${HOME}"/.termux termux.properties

		console.link "${PREFIX}"/bin "${HOME}"/.termux colors.properties

		settings_intent

		files_list=()

		console.file "${HOME}"/.dextop dextop-additions-checkpoint
	fi

	# shell

	if [ ! -f "${HOME}"/.dextop/dextop-shell-checkpoint ]
	then

		files_list+=(
			.bash_aliases
			.bash_functions
			.bash_logout
			.bashrc
			.hushlogin
			.profile
		)

		console.download get.trmnl.me/shell "${HOME}" ${files_list[@]}

		console.link "${HOME}" "${ROOT}"/root ${files_list[@]}

		files_list=()

		console.file "${HOME}"/.dextop dextop-shell-checkpoint
	fi

	# bookmarks

	if [ ! -f "${HOME}"/.dextop/dextop-bookmarks-checkpoint ]
	then
		[ -d "${PREFIX}"/cnt ]            && console.write 'file:///data/data/com.termux/files/cnt Container'           "${HOME}"/.config/gtk-3.0 bookmarks
		[ -d "${PREFIX}"/media/external ] && console.write 'file:///data/data/com.termux/files/media/external External' "${HOME}"/.config/gtk-3.0 bookmarks
		[ -d "${PREFIX}"/media/internal ] && console.write 'file:///data/data/com.termux/files/media/internal Internal' "${HOME}"/.config/gtk-3.0 bookmarks

		console.file "${HOME}"/.dextop dextop-bookmarks-checkpoint
	fi

	# icons

	if [ ! -f "${HOME}"/.dextop/dextop-icons-checkpoint ]
	then
		# papirus icon theme

		console.download https://github.com/PapirusDevelopmentTeam/papirus-icon-theme/archive/master/master.tar.gz "${HOME}" archive

		themes_list=(
			Papirus-Dark
			Papirus-Light
			Papirus
		)

		for theme in ${themes_list[@]}
		do
			cd "${HOME}"

			tar																	\
				--extract														\
				--file="${HOME}"/archive papirus-icon-theme-master/"${theme}"	\
					--directory="${HOME}"
		done

		mv "${HOME}"/papirus-icon-theme* "${HOME}"/.icons

		for theme in ${themes_list[@]}
		do
			gtk-update-icon-cache -q "${HOME}"/.icons/"${theme}"
		done

		rm -rf "${HOME}"/archive

		# system icon themes

		files_list+=(
			Adwaita
			default
			hicolor
		)

		console.keep "${ROOT}"/usr/share/icons ${files_list[@]}

		console.keep "${PREFIX}"/share/icons ${files_list[@]}

		files_list=()

		console.file "${HOME}"/.dextop dextop-icons-checkpoint
	fi

	# themes

	if [ ! -f "${HOME}"/.dextop/dextop-themes-checkpoint ]
	then
		files_list+=(
			Arc
			Arc-Dark
			Arc-Darker
			Arc-Lighter
		)

		console.copy "${ROOT}"/usr/share/themes "${PREFIX}"/share/themes ${files_list[@]}

		console.keep "${ROOT}"/usr/share/themes ${files_list[@]}

		console.keep "${PREFIX}"/share/themes ${files_list[@]}

		files_list=()

		console.file "${HOME}"/.dextop dextop-themes-checkpoint
	fi

	# backgrounds

	if [ ! -f "${HOME}"/.dextop/dextop-backgrounds-checkpoint ]
	then
		files_list=(
			dextop-aubergine.svg
			dextop-black.svg
			dextop-blue.svg
			dextop-canary.svg
			dextop-coral.svg
			dextop-graphite.svg
			dextop-grey.svg
			dextop-lilac.svg
			dextop-powder.svg
			dextop-silver.svg
			dextop-sky.svg
			dextop-sunflower.svg
			dextop-white.svg
		)

		console.download get.dxtp.app "${HOME}"/.dextop ${files_list[@]}

		console.link "${HOME}"/.dextop "${ROOT}"/usr/share/backgrounds/dextop ${files_list[@]}

		console.link "${HOME}"/.dextop "${PREFIX}"/share/backgrounds/dextop ${files_list[@]}

		files_list=()

		console.file "${HOME}"/.dextop dextop-backgrounds-checkpoint
	fi

	# update

	if [ ! -f "${HOME}"/.dextop/dextop-update-checkpoint ]
	then
		console.file "${HOME}"/.dextop dextop-update

		console.file "${HOME}"/.dextop dextop-update-checkpoint
	fi

	# move setup

	if [ ! -f "${HOME}"/.dextop/dextop-move-checkpoint ]
	then
		mv "${HOME}"/dextop "${HOME}"/.dextop/dextop

		console.file "${HOME}"/.dextop dextop-move-checkpoint
	fi

	# checkpoint

	console.file "${HOME}"/.dextop dextop-setup-checkpoint
fi

# setup check

console.result dextop-setup-checkpoint "${script}"

# session start

"${PREFIX}"/bin/login
