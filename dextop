#!/bin/bash

# dependencies #

curl -sL get.trmnl.me/console/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-06-2022"

# usage #

while (($#))
do
	case "${1}"
	in
		-x|--xfce)
			option="xfce"
		;;

		-n|--none)
			option="none"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-x, --xfce    XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none    No DE setup: console access to environment and utilities."
			echo
			echo -e "-h, --help    Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear #

console.clear

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

export option="${option}"

# defaults #

[ -z "${option}" ] && option="xfce" && echo "${option}" > "${PREFIX}"/bin/dextop

# functions #

clean () {
	rm -rf "${script}"
}

trap 'clean' EXIT

container_command () {
	# run container commands without session login

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# run as 'root' with default system parameters

	proot																		\
	--kill-on-exit																\
	--link2symlink																\
	--rootfs="${PREFIX}"/cnt													\
	--change-id=0:0																\
	--pwd="/root"																\
	--bind="/apex:/apex"														\
	--bind="/data:/data"														\
	--bind="/dev:/dev"															\
	--bind="/dev/urandom:/dev/random"											\
	--bind="/proc:/proc"														\
	--bind="/proc/self/fd:/dev/fd"												\
	--bind="/proc/self/fd/0:/dev/stdin"											\
	--bind="/proc/self/fd/1:/dev/stdout"										\
	--bind="/proc/self/fd/2:/dev/stderr"										\
	--bind="/storage:/storage"													\
	--bind="/sys:/sys"															\
	--bind="/system:/system"													\
	--bind="/vendor:/vendor"													\
		/usr/bin/env -i															\
		"LANG=C.UTF-8"															\
		"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"		\
		"PREFIX=/data/data/com.termux/files/usr"								\
		"TERM=${TERM}"															\
	"${@}"
}

# run failsafe package install:
# termux package servers are sometimes unresponsive or badly authenticated

console.fwd "Please wait..."
echo

while [[ -z $(command -v proot) ]]
do
	bash -c 'yes | pkg update'									>> /dev/null 2>&1
	bash -c 'yes | pkg upgrade'									>> /dev/null 2>&1
	bash -c 'yes | pkg install proot'							>> /dev/null 2>&1
	bash -c 'yes | pkg update'									>> /dev/null 2>&1
done

# download utilities

utilities_list+=(
	termux-directories
	termux-packages
	termux-repositories
	termux-storage
	termux-update
	container-expand
	container-image
	container-packages
	container-repositories
	container-session
	container-settings
	container-system
	container-user
	container-vnc
)

console.download get.dxtp.app "${PREFIX}"/bin ${utilities_list[@]}

# in order of execution

if [ ! -f "${PREFIX}"/bin/dextop-checkpoint-complete ]
then
	# termux

	if [ ! -f "${PREFIX}"/bin/termux-checkpoint-complete ]
	then
		"${PREFIX}"/bin/termux-update
		"${PREFIX}"/bin/termux-directories
		"${PREFIX}"/bin/termux-storage
		"${PREFIX}"/bin/termux-repositories
		"${PREFIX}"/bin/termux-packages

		console.file "${PREFIX}"/bin termux-checkpoint-complete
	fi

	# container

	if [ ! -f "${PREFIX}"/bin/container-checkpoint-complete ]
	then
		"${PREFIX}"/bin/container-image
		"${PREFIX}"/bin/container-system

		container_command "${PREFIX}"/bin/container-expand
		container_command "${PREFIX}"/bin/container-repositories
		container_command "${PREFIX}"/bin/container-packages
		container_command "${PREFIX}"/bin/container-user

		console.file "${PREFIX}"/bin container-checkpoint-complete
	fi

	# additions

	if [ ! -f "${PREFIX}"/bin/termux-additions-complete ]
	then
		# termux #

		console.directory "${HOME}" .termux

		files_list+=(
			termux
			termux-browser
			termux-chrome
			termux-email
			termux-gmail
			termux-information
			termux-message
			termux.properties
		)

		console.download get.trmnl.me/termux "${PREFIX}"/bin ${files_list[@]}

		console.link "${PREFIX}"/bin "${HOME}"/.termux termux.properties

		files_list=()

		# bash #

		files_list+=(
			.bash_aliases
			.bash_functions
			.bash_logout
			.bashrc
			.hushlogin
			.profile
		)

		console.download get.trmnl.me/bash "${HOME}" ${files_list[@]}

		console.link "${HOME}" "${PREFIX}"/cnt/root ${files_list[@]}

		files_list=()

		console.file "${PREFIX}"/bin termux-additions-complete
	fi

	# bookmarks

	if [ ! -f "${PREFIX}"/bin/bookmarks-checkpoint-complete ]
	then
		console.directory "${HOME}"/.config/gtk-3.0

		[ -d "${PREFIX}"/media/external ] && echo 'file:///data/data/com.termux/files/media/external External' >  "${HOME}"/.config/gtk-3.0/bookmarks
		[ -d "${PREFIX}"/media/internal ] && echo 'file:///data/data/com.termux/files/media/internal Internal' >> "${HOME}"/.config/gtk-3.0/bookmarks
		[ -d "${PREFIX}"/cnt ]            && echo 'file:///data/data/com.termux/files/cnt Container'           >> "${HOME}"/.config/gtk-3.0/bookmarks

		console.file "${PREFIX}"/bin/bookmarks-checkpoint-complete
	fi

	# icons

	files_list+=(
		Adwaita
		Papirus
		Papirus-Dark
		Papirus-Light
		default
		hicolor
	)

	console.copy "${PREFIX}"/cnt/usr/share/icons "${PREFIX}"/share/icons ${files_list[@]}

	console.keep "${PREFIX}"/cnt/usr/share/icons ${files_list[@]}

	console.keep "${PREFIX}"/share/icons ${files_list[@]}


	files_list=()

	# themes

	files_list+=(
		Arc
		Arc-Dark
		Arc-Darker
		Arc-Lighter
	)

	console.copy "${PREFIX}"/cnt/usr/share/themes "${PREFIX}"/share/themes ${files_list[@]}

	console.keep "${PREFIX}"/cnt/usr/share/themes ${files_list[@]}

	console.keep "${PREFIX}"/share/themes ${files_list[@]}

	files_list=()

	# backgrounds

	files_list=(
		dextop-aubergine.svg
		dextop-black.svg
		dextop-blue.svg
		dextop-canary.svg
		dextop-coral.svg
		dextop-graphite.svg
		dextop-grey.svg
		dextop-lilac.svg
		dextop-powder.svg
		dextop-silver.svg
		dextop-sky.svg
		dextop-sunflower.svg
		dextop-white.svg
	)

	console.download get.dxtp.app "${HOME}"/.dextop ${files_list[@]}

	console.link "${HOME}"/.dextop "${PREFIX}"/cnt/usr/share/backgrounds/dextop ${files_list[@]}

	console.link "${HOME}"/.dextop "${PREFIX}"/share/backgrounds/dextop ${files_list[@]}

	files_list=()

	# checkpoint

	console.file "${PREFIX}"/bin dextop-checkpoint-complete
fi

# setup check

console.result dextop-checkpoint-complete "${script}"
