#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-i|--i3wm)
			desktop_option="i3wm"
		;;
		
		-e|--ede)
			desktop_option="ede"
		;;

		-k|--kde)
			desktop_option="kde"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-n|--none)
			desktop_option="none"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;
		
		-u|--user)
			user_option="termux"
		;;
		
		-p|--update)
			package_option="update"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-i, --i3wm             \t I3WM setup: install i3 window manager and utilities."
			echo
			echo -e "-e, --ede              \t EDE setup: install E desktop environment and utilities."
			echo -e "-k, --kde              \t KDE5 setup: install K desktop environment and utilities."
			echo -e "-x, --xfce             \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none             \t No DE setup: console access to environment and utilities."
			echo
			echo -e "-b, --base             \t Base setup: download and install base distribution image only."
			echo
			echo -e "-f, --full             \t Full setup: download and install full desktop environment and utilities."
			echo
			echo -e "-p, --update           \t Package update: check/download/install Termux and Termux API package updates."
			echo
			echo -e "-h, --help             \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear #

console.clear

# prompt #

console.script "Setting up ${script#*-}"
echo

console.fwd "Please wait..."
echo

bash -c 'yes | pkg update'														>> /dev/null 2>&1
bash -c 'yes | pkg upgrade'														>> /dev/null 2>&1
bash -c 'yes | pkg install proot debootstrap'									>> /dev/null 2>&1

# variables #

# defaults #

[ -z "${desktop_option}" ]														&& desktop_option="i3wm"

# export variables

echo "# ${script} #"															>> "${PREFIX}"/bin/dextop

echo 'export MAIN_DIRECTORY="${PREFIX%/*}"'										>> "${PREFIX}"/bin/dextop
echo 'export BINARIES_DIRECTORY="${PREFIX}"/bin'								>> "${PREFIX}"/bin/dextop
echo 'export CONFIGURATIONS_DIRECTORY="${PREFIX}"/etc'							>> "${PREFIX}"/bin/dextop
echo 'export LIBRARIES_DIRECTORY="${PREFIX}"/lib'								>> "${PREFIX}"/bin/dextop
echo 'export SOURCES_DIRECTORY="${PREFIX}"/etc/apt'								>> "${PREFIX}"/bin/dextop
echo 'export BACKUP_DIRECTORY="${MAIN_DIRECTORY}"/bkp'							>> "${PREFIX}"/bin/dextop
echo 'export IMAGE_DIRECTORY="${MAIN_DIRECTORY}"/img'							>> "${PREFIX}"/bin/dextop
echo 'export ISO_DIRECTORY="${MAIN_DIRECTORY}"/iso'								>> "${PREFIX}"/bin/dextop
echo 'export MOUNT_DIRECTORY="${MAIN_DIRECTORY}"/mnt'							>> "${PREFIX}"/bin/dextop

echo "export version=${version}"												>> "${PREFIX}"/bin/dextop
echo "export desktop_option=${desktop_option}"									>> "${PREFIX}"/bin/dextop
echo "export install_option=${install_option}"									>> "${PREFIX}"/bin/dextop
echo "export package_option=${package_option}"									>> "${PREFIX}"/bin/dextop
echo "export user_option=${user_option}"										>> "${PREFIX}"/bin/dextop

# source variables

[ -f "${PREFIX}"/bin/dextop ] && . "${PREFIX}"/bin/dextop

# download utilities

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-additions
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-links
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-packages
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-properties
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-repositories
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-storage
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-update

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-architecture
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-distribution
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-environment
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-expand
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-groups
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-hostname
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-hosts
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-image
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-information
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-keyboard
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-links
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-locales
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-nameserver
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-packages
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-preload
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-repositories
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-session
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-shell
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-superuser
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-timezones
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	proot-user

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	user-packages

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	vnc-pass
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	vnc-session

# clear #

console.clear

# in order of execution

if [ ! -f "${BINARIES_DIRECTORY}"/termux-checkpoint-complete ]
then
	"${BINARIES_DIRECTORY}"/termux-update
	"${BINARIES_DIRECTORY}"/termux-properties
	"${BINARIES_DIRECTORY}"/termux-storage
	"${BINARIES_DIRECTORY}"/termux-repositories
	"${BINARIES_DIRECTORY}"/termux-packages
	"${BINARIES_DIRECTORY}"/termux-links
	"${BINARIES_DIRECTORY}"/termux-additions

	echo "yes" > "${BINARIES_DIRECTORY}"/termux-checkpoint-complete
fi

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/termux-setup-complete

if [ ! -f "${BINARIES_DIRECTORY}"/proot-checkpoint-complete ]
then
	"${BINARIES_DIRECTORY}"/proot-architecture
	"${BINARIES_DIRECTORY}"/proot-information
	"${BINARIES_DIRECTORY}"/proot-distribution
	"${BINARIES_DIRECTORY}"/proot-image
	"${BINARIES_DIRECTORY}"/proot-groups
	"${BINARIES_DIRECTORY}"/proot-environment
	"${BINARIES_DIRECTORY}"/proot-hostname
	"${BINARIES_DIRECTORY}"/proot-hosts
	"${BINARIES_DIRECTORY}"/proot-nameserver
	"${BINARIES_DIRECTORY}"/proot-preload

	echo "yes" > "${BINARIES_DIRECTORY}"/proot-checkpoint-complete

	"${BINARIES_DIRECTORY}"/proot-session
else
	"${BINARIES_DIRECTORY}"/proot-user											"${user_name}"
	"${BINARIES_DIRECTORY}"/proot-superuser										"${user_name}"

	"${BINARIES_DIRECTORY}"/proot-shell

	"${BINARIES_DIRECTORY}"/proot-expand
	"${BINARIES_DIRECTORY}"/proot-repositories
	"${BINARIES_DIRECTORY}"/proot-packages
	"${BINARIES_DIRECTORY}"/proot-links
fi

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/proot-setup-complete

if [ ! -f "${BINARIES_DIRECTORY}"/user-checkpoint-complete ]
then

	echo "yes" > "${BINARIES_DIRECTORY}"/user-checkpoint-complete

	"${BINARIES_DIRECTORY}"/proot-session
else
	"${BINARIES_DIRECTORY}"/user-packages
fi

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/user-setup-complete

if [ ! -f "${BINARIES_DIRECTORY}"/vnc-checkpoint-complete ]
then

	echo "yes" > "${BINARIES_DIRECTORY}"/vnc-checkpoint-complete
fi

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/vnc-setup-complete

# checkpoint #

echo "yes" > "${BINARIES_DIRECTORY}"/dextop-checkpoint-complete