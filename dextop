#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

if [[ -z $(command -v frobulator) ]]
then
	if [[ $(id -u -n) = "root" ]]
	then
		SUDO_HOME=/root

		USER="${SUDO_USER}"

		HOME=/home/"${USER}"
	fi

	if [[ -z $(command -v curl) ]]
	then
		yes | apt-get install curl
	fi

	if [ ! -d "${HOME}"/.local/bin ]
	then
		mkdir -p "${HOME}"/.local/bin
	fi

	curl -s -L get.frbltr.app > "${HOME}"/.local/bin/frobulator

	chmod +x "${HOME}"/.local/bin/frobulator
fi

. "${HOME}"/.local/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="07-01-2023"

# usage ////////////////////////////////////////////////////////////////////////

while (($#))
do
	case "${1}"
	in
		-c|--console)
			environment="console"
		;;

		-e|--environment)
			environment="${2}"
		;;

		-t|--termux)
			option="termux"
		;;

		-n|--container)
			option="container"
		;;

		-b|--backup)
			option="backup"
		;;

		-u|--update)
			option="update"
			update="${2}"

			if [ "${update}" = "utility" ]
			then
				utility="${3}"

				shift
			fi

			shift
		;;

		-h|--help)
			echo
			echo -e "Usage: ${script} -c | -e [Environment] | -t | -n | -b | -u [Update Type] [Utility Name] | [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-c, --console        Setup Console access to environment and utilities only."
			echo
			echo -e "-e, --environment    Setup desktop environment and utilities."
			echo
			echo -e "                     [ i3 ]"
			echo -e "                     [ mate ]"
			echo -e "                     [ xfce ] [ Default ]"
			echo
			echo -e "-t, --termux         Setup Termux environment and utilities only."
			echo
			echo -e "-n, --container      Setup Container environment and utilities only."
			echo
			echo -e "-b, --backup         Backup Termux user configuration files."
			echo
			echo -e "-u, --update         Update application packages and utilities."
			echo
			echo -e "                     [ dextop ] [ Default ]"
			echo -e "                     [ utility ]"
			echo -e "                     [ additions ]"
			echo -e "                     [ shell ]"
			echo -e "                     [ termux ]"
			echo
			echo -e "-h, --help           Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} -c | -e [Environment] | -t | -n | -b | -u [Update] [Name] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear ////////////////////////////////////////////////////////////////////////

frobulator.clear

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"
echo

# variables ////////////////////////////////////////////////////////////////////

stamp=$(date +"%m-%d-%Y-%H-%M-%S")

# defaults /////////////////////////////////////////////////////////////////////

if [ ! -f "${HOME}"/.dextop/dextop-environment ]
then
	if [ -z "${environment}" ]
	then
		environment="xfce"

		frobulator.flag "${environment}" "${HOME}"/.dextop dextop-environment

		unset environment
	fi
fi

if [ ! -f "${HOME}"/.dextop/dextop-session ]
then
	if [ -z "${session}" ]
	then
		if [[ $(cat "${HOME}"/.dextop/dextop-environment) = "xfce" ]]
		then
			session="xfce4-session"
		fi

		if [[ $(cat "${HOME}"/.dextop/dextop-environment) = "i3" ]]
		then
			session="i3"
		fi

		frobulator.flag "${session}" "${HOME}"/.dextop dextop-session

		unset session
	fi
fi

if [ -z "${ROOT}" ]
then
	ROOT=("${PREFIX}"/cnt/*/*)
fi

# functions ////////////////////////////////////////////////////////////////////

container_setup () {
	# make container setup location known

	if [ $# -eq 0 ]
	then
		ROOT=("${PREFIX}"/cnt/*/*)

		export ROOT="${ROOT}"

		return
	fi

	# run container setup commands through 'proot'

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# run as 'root' with default system parameters

	unset container_command

	container_command+="proot"
	container_command+=" --kill-on-exit"
	container_command+=" --link2symlink"
	container_command+=" --rootfs=${ROOT}"
	container_command+=" --change-id=0:0"
	container_command+=" --pwd=/root"
	container_command+=" --bind=/apex:/apex"
	container_command+=" --bind=/data:/data"
	container_command+=" --bind=/dev:/dev"
	container_command+=" --bind=/dev/urandom:/dev/random"
	container_command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"
	container_command+=" --bind=/proc:/proc"
	container_command+=" --bind=/proc/self/fd:/dev/fd"
	container_command+=" --bind=/proc/self/fd/0:/dev/stdin"
	container_command+=" --bind=/proc/self/fd/1:/dev/stdout"
	container_command+=" --bind=/proc/self/fd/2:/dev/stderr"
	container_command+=" --bind=/storage:/storage"
	container_command+=" --bind=/sys:/sys"
	container_command+=" --bind=/system:/system"
	container_command+=" --bind=/vendor:/vendor"
	container_command+=" --bind=/data/data/com.termux/files/home:/root"
	container_command+=" /usr/bin/env -i"
	container_command+=" PREFIX=/data/data/com.termux/files/usr"
	container_command+=" PATH=${HOME}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PREFIX}/bin:"
	container_command+=" HOME=/root"
	container_command+=" LANG=C.UTF-8"
	container_command+=" TERM=${TERM}"
	container_command+=" ${@}"

	${container_command}
}

architecture_intent () {
	# list supported processor architechtures

	cpu_architectures=(
		aarch64
		arm
		amd64
		i*86
		x86_64
	)

	# test processor architecture string

	device_architecture="$(uname -m)"

	for i in ${!cpu_architectures[@]}
	do
		if [[ "${device_architecture}" != "${cpu_architectures[i]}" ]]
		then

			frobulator.scs "Supported architecture" "[ ${image_architecture} ]"
			echo

			frobulator.fwd "Proceeding..."
			echo

			break
		else
			frobulator.wrn "Unsupported architecture" "[ ${image_architecture} ]"
			echo

			frobulator.fwd "Aborting..."
			echo

			frobulator.stp "Exiting."
			echo

			exit 1
		fi
	done

	clear
}

reload_intent () {
	# termux settings reload

	unset settings_command

	settings_command+="am broadcast"
	settings_command+=" --user 0"
	settings_command+=" -a com.termux.app.reload_style"
	settings_command+=" com.termux"

	frobulator.silence "${settings_command}"
}

backup_intent () {
	# backup routine:
	# create archive of user home directory

	backup_extension="tar.gz"
	backup_archive="dextop-backup-${stamp}"
	backup_directory="${HOME}"

	frobulator.inf "Generating backup" "[ ${backup_archive} ]"
	echo

	frobulator.archive "${backup_archive}" "${backup_extension}" "${backup_directory}" &

	frobulator.progress "Backing up..." "[ ${backup_directory} ]"
	echo
}

settings_intent () {
	# termux settings and properties

	settings_list+=(
		termux-colors
		termux-font
		termux-properties
		termux-reload-settings
	)

	frobulator.download get.trmx.app "${HOME}"/.local/bin ${settings_list[@]}

	frobulator.link "${HOME}"/.local/bin "${HOME}"/.termux termux-colors     colors.properties
	frobulator.link "${HOME}"/.local/bin "${HOME}"/.termux termux-font       font.ttf
	frobulator.link "${HOME}"/.local/bin "${HOME}"/.termux termux-properties termux.properties

	reload_intent

	settings_list=()
}

dextop_intent () {
	curl -s -L run.dxtp.app > "${HOME}"/.local/bin/dextop
}

utility_intent () {
	# load dextop utilities

	utilities_list+=(
		termux-packages
		termux-repositories
		termux-update
		termux-storage
		termux-display
		container-expansion
		container-image
		container-packages
		container-repositories
		container-session
		container-settings
		container-user
	)

	if [[ ${utilities_list[@]} =~ "${utility}" ]]
	then
		frobulator.download get.dxtp.app "${HOME}"/.local/bin "${utility}"

		exit 0

	elif [[ "${utility}" = "all" ]]
	then
		frobulator.download get.dxtp.app "${HOME}"/.local/bin ${utilities_list[@]}

		exit 0
	else
		frobulator.err "Unknown utility name" "[ ${utility}]"
		echo

		frobulator.msg "Known upgradable utilities" "[ version // ${version} ]"
		echo

		IFS=$'\n'

		printf "[ > ] %s\n" ${utilities_list[@]}

		echo

		IFS=''

		frobulator.inf "Review utility name spelling and try again."
		echo

		exit 1
	fi

	utilities_list=()
}

directories_intent () {
	# generate dextop required directories

	directories_list+=(
		bkp
		cnt
		img
		mnt
		media
		storage
	)

	frobulator.directory "${PREFIX}" ${directories_list[@]}

	directories_list=()

	# generate home directory structure

	directories_list+=(
		Desktop
		Documents
		Downloads
		Music
		Pictures
		Public
		Templates
		Videos
	)

	frobulator.directory "${HOME}" ${directories_list[@]}

	directories_list=()

	# generate root directory structure

	directories_list+=(
		bin
		bkp
		cnt
		etc
		img
		lib
		mnt
		opt
		tmp
		media
		storage
	)

	frobulator.link "${PREFIX}" "${PREFIX%/*}" ${directories_list[@]}

	directories_list=()
}

labels_intent () {
	# generate file browser bookmark labels

	directories_list=(
		"${PREFIX}"/cnt
		"${PREFIX}"/media/external
		"${PREFIX}"/media/internal
	)

	labels_list=(
		Container
		External
		Internal
	)

	for (( i=0 ; i<${#directories_list[@]} ; i++ ))
	do
		if [ -d "${directory}" ]
		then
			frobulator.write "file://${directories_list[$i]} ${labels_list[$i]}" "${HOME}"/.config/gtk-3.0 bookmarks
		fi
	done

	directories_list=()

	labels_list=()
}

additions_intent () {
	# load additions files

	additions_list+=(
		dextop-additions
	)

	frobulator.download get.dxtp.app "${HOME}"/.local/bin ${additions_list[@]}

	additions_list=()
}

shell_intent () {
	# load shell files

	shell_list+=(
		bash-aliases
		bash-configuration
		bash-functions
		bash-login
		bash-logout
		bash-profile
	)

	frobulator.download get.trmnl.me "${HOME}"/.local/bin ${shell_list[@]}

	if [ -z "${option}" ] || [ "${option}" = "termux" ]
	then
		# link to user home

		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-aliases       .bash_aliases
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-configuration .bashrc
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-configuration .bash_configuration
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-functions     .bash_functions
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-login         .bash_login
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-logout        .bash_logout
		frobulator.link "${HOME}"/.local/bin "${HOME}"          bash-profile       .bash_profile

		frobulator.file "${HOME}" .hushlogin
	fi

	if [ "${option}" = "termux" ]
	then
		:
	else
		# link to root home

		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-aliases       .bash_aliases
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-configuration .bashrc
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-configuration .bash_configuration
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-functions     .bash_functions
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-login         .bash_login
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-logout        .bash_logout
		frobulator.link "${HOME}"/.local/bin "${ROOT}"/root bash-profile       .bash_profile

		frobulator.file "${ROOT}"/root .hushlogin
	fi

	shell_list=()
}

backgrounds_intent () {
	# load background(s)

	backgrounds_list=(
		dextop-black.svg
		dextop-blue.svg
		dextop-coral.svg
		dextop-grey.svg
	)

	frobulator.download get.dxtp.app "${HOME}"/.dextop ${backgrounds_list[@]}

	# link to backgrounds directories

	frobulator.link "${HOME}"/.dextop "${ROOT}"/usr/share/backgrounds/dextop ${backgrounds_list[@]}

	frobulator.link "${HOME}"/.dextop "${PREFIX}"/share/backgrounds/dextop ${backgrounds_list[@]}

	backgrounds_list=()
}

icons_intent () {
	# select icon themes

	icons_list+=(
		Adwaita
		Papirus
		Papirus-Dark
		Papirus-Light
		default
		hicolor
	)

	# keep icons selections

	frobulator.keep "${PREFIX}"/share/icons ${icons_list[@]}

	icons_list=()

	# link icons directories

	frobulator.link "${PREFIX}"/share "${HOME}" icons .icons
}

themes_intent () {
	# select themes

	files_list+=(
		Arc
		Arc-Dark
		Arc-Darker
		Arc-Lighter
	)

	# keep themes selections

	frobulator.keep "${ROOT}"/usr/share/themes ${files_list[@]}

	files_list=()

	# link themes directories

	frobulator.link "${ROOT}"/usr/share "${HOME}" themes .themes
}

session_intent () {
	# start session

	cd "${HOME}"

	"${PREFIX}"/bin/login
}

# architecture check ///////////////////////////////////////////////////////////

frobulator.log "architecture_intent"

# options //////////////////////////////////////////////////////////////////////

if [ "${option}" = "backup" ]
then
	backup_intent
fi

if [ "${option}" = "update" ]
then

	if [[ "${update}" = [dD][eE][xX][tT][oO][pP] ]]
	then
		frobulator.inf "Updating" "[ ${update} ]"
		echo

		frobulator.fwd "Updating..."
		echo

		dextop_intent
	fi

	if [[ "${update}" = [uU][tT][iI][lL][iI][tT][yY] ]]
	then

		frobulator.inf "Updating" "[ ${utility} ]"
		echo

		frobulator.fwd "Updating..."
		echo

		utility_intent
	fi

	if [[ "${update}" = [aA][dD][dD][iI][tT][iI][oO][nN][sS] ]]
	then
		frobulator.inf "Updating" "[ ${update} ]"
		echo

		frobulator.fwd "Updating..."
		echo

		additions_intent
	fi

	if [[ "${update}" = [sS][hH][eE][lL][lL] ]]
	then
		frobulator.inf "Updating" "[ ${update} ]"
		echo

		frobulator.fwd "Updating..."
		echo

		shell_intent
	fi
fi

# setup ////////////////////////////////////////////////////////////////////////

if [ ! -f "${HOME}"/.dextop/dextop-setup-checkpoint ]
then
	# backup

	if [ ! -f "${HOME}"/.dextop/dextop-backup-checkpoint ]
	then
		# run backup

		backup_intent

		frobulator.file "${HOME}"/.dextop dextop-backup-checkpoint
	fi

	# preferences

	if [ ! -f "${HOME}"/.dextop/dextop-preferences-checkpoint ]
	then
		# load settings

		settings_intent

		frobulator.file "${HOME}"/.dextop dextop-preferences-checkpoint
	fi

	#  utilities

	if [ ! -f "${HOME}"/.dextop/dextop-utilities-checkpoint ]
	then
		# load utilities

		utility_intent

		frobulator.file "${HOME}"/.dextop dextop-utilities-checkpoint
	fi

	# directories

	if [ ! -f "${HOME}"/.dextop/dextop-directories-checkpoint ]
	then
		# generate directories

		directories_intent

		frobulator.file "${HOME}"/.dextop dextop-directories-checkpoint
	fi

	# termux ///////////////////////////////////////////////////////////////////

	if [ -z "${option}" ]          || \
	   [ "${option}" = "termux" ]  || \
	   [ "${option}" = "console" ] || \
	   [ "${option}" = "xfce" ]
	then
		if [ "${option}" = "update" ]
		then
			if [ "${update}" = [tT][eE][rR][mM][uU][xX] ]
			then
				if [ ! -f "${HOME}"/.dextop/dextop-update-checkpoint ]
				then
					# run update

					"${HOME}"/.local/bin/termux-update

					frobulator.file "${HOME}"/.dextop dextop-update-checkpoint
				fi
			fi
		fi

		if [ ! -f "${HOME}"/.dextop/dextop-termux-checkpoint ]
		then
			# run termux setup utilities

			"${HOME}"/.local/bin/termux-storage
			"${HOME}"/.local/bin/termux-repositories
			"${HOME}"/.local/bin/termux-packages

			frobulator.file "${HOME}"/.dextop dextop-termux-checkpoint
		fi
	fi

	# container ////////////////////////////////////////////////////////////////

	if [ -z "${option}" ]            || \
	   [ "${option}" = "container" ] || \
	   [ "${option}" = "console" ]   || \
	   [ "${option}" = "xfce" ]
	then

		if [ ! -f "${HOME}"/.dextop/dextop-image-checkpoint ]
		then
			"${HOME}"/.local/bin/container-image

			frobulator.file "${HOME}"/.dextop dextop-image-checkpoint
		fi

		if [ ! -f "${HOME}"/.dextop/dextop-container-checkpoint ]
		then
			# run container setup utilities

			container_setup

			container_setup "${HOME}"/.local/bin/container-expansion
			container_setup "${HOME}"/.local/bin/container-repositories
			container_setup "${HOME}"/.local/bin/container-packages
			container_setup "${HOME}"/.local/bin/container-user

			frobulator.file "${HOME}"/.dextop dextop-container-checkpoint
		fi
	fi

	# additions

	if [ ! -f "${HOME}"/.dextop/dextop-additions-checkpoint ]
	then
		# load additions

		additions_intent

		frobulator.file "${HOME}"/.dextop dextop-additions-checkpoint
	fi

	# shell

	if [ ! -f "${HOME}"/.dextop/dextop-shell-checkpoint ]
	then
		# load shell configurations

		shell_intent

		frobulator.file "${HOME}"/.dextop dextop-shell-checkpoint
	fi

	# bookmarks

	if [ ! -f "${HOME}"/.dextop/dextop-bookmarks-checkpoint ]
	then
		# load bookmark labels

		labels_intent

		frobulator.file "${HOME}"/.dextop dextop-bookmarks-checkpoint
	fi

	# login

	if [ ! -f "${HOME}"/.dextop/dextop-login-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-login

		frobulator.write login "${HOME}"/.dextop dextop-login

		frobulator.file "${HOME}"/.dextop dextop-login-checkpoint
	fi

	# logout

	if [ ! -f "${HOME}"/.dextop/dextop-logout-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-logout

		frobulator.file "${HOME}"/.dextop dextop-logout-checkpoint
	fi

	# update

	if [ ! -f "${HOME}"/.dextop/dextop-update-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-update

		frobulator.file "${HOME}"/.dextop dextop-update-checkpoint
	fi

	# audio

	if [ ! -f "${HOME}"/.dextop/dextop-audio-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-audio

		frobulator.file "${HOME}"/.dextop dextop-audio-checkpoint
	fi

	# move setup

	if [ ! -f "${HOME}"/.dextop/dextop-move-checkpoint ]
	then
		mv "${HOME}"/dextop "${HOME}"/.local/bin/dextop

		frobulator.file "${HOME}"/.dextop dextop-move-checkpoint
	fi

	if [ "${option}" = "console" ]
	then
		:
	else
		# backgrounds

		if [ ! -f "${HOME}"/.dextop/dextop-backgrounds-checkpoint ]
		then
			backgrounds_intent

			frobulator.file "${HOME}"/.dextop dextop-backgrounds-checkpoint
		fi

		# icons

		if [ ! -f "${HOME}"/.dextop/dextop-icons-checkpoint ]
		then
			icons_intent

			frobulator.file "${HOME}"/.dextop dextop-icons-checkpoint
		fi

		# themes

		if [ ! -f "${HOME}"/.dextop/dextop-themes-checkpoint ]
		then
			themes_intent

			frobulator.file "${HOME}"/.dextop dextop-themes-checkpoint
		fi
	fi

	# checkpoint

	frobulator.file "${HOME}"/.dextop dextop-setup-checkpoint
fi

# clear ////////////////////////////////////////////////////////////////////////

frobulator.clear

# session //////////////////////////////////////////////////////////////////////

if [ "${option}" = "update" ]
then
	:
else
	session_intent
fi
