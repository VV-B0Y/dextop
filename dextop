#!/bin/bash

# dependencies #

curl -sL get.trmnl.me/console/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-i|--i3wm)
			desktop_option="i3wm"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-n|--none)
			desktop_option="none"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;

		-p|--update)
			install_option="update"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-i, --i3wm             \t I3WM setup: install i3 window manager and utilities."
			echo -e "-x, --xfce             \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none             \t No DE setup: console access to environment and utilities."
			echo
			echo -e "-b, --base             \t Base setup: download and install distribution image only."
			echo
			echo -e "-f, --full             \t Full setup: download and install full desktop environment and utilities."
			echo
			echo -e "-p, --update           \t Package update: check/download/install Termux and Termux API package updates."
			echo
			echo -e "-h, --help             \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear #

console.clear

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# defaults #

[ -z "${desktop_option}" ] && desktop_option="i3wm"

# functions #

container_command () {
	# run container commands without session login

	# update variables

	. "${PREFIX}"/bin/dextop

	# assume termux-exec is present - unset LD_PRELOAD

	unset LD_PRELOAD

	# run as 'root' with default system parameters

	proot																		\
	--kill-on-exit																\
	--link2symlink																\
	--rootfs="${CONTAINER_DIRECTORY}"												\
	--change-id=0:0																\
	--pwd=/root																	\
	--bind=/apex																\
	--bind=/data																\
	--bind=/dev																	\
	--bind="/dev/urandom:/dev/random"											\
	--bind=/proc																\
	--bind="/proc/self/fd:/dev/fd"												\
	--bind="/proc/self/fd/0:/dev/stdin"											\
	--bind="/proc/self/fd/1:/dev/stdout"										\
	--bind="/proc/self/fd/2:/dev/stderr"										\
	--bind=/storage																\
	--bind=/sys																	\
	--bind=/system																\
	--bind=/vendor																\
		/usr/bin/env -i															\
		"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"		\
		"TERM=${TERM}"															\
	"${@}"
}

# export variables

echo "# ${script} #"															>> "${PREFIX}"/bin/dextop

echo 'export DISPLAY=":1"'														>> "${PREFIX}"/bin/dextop
echo 'export DISPLAY_NUMBER="${DISPLAY/:/}"'									>> "${PREFIX}"/bin/dextop
echo 'export PORT="590${DISPLAY_NUMBER}"'										>> "${PREFIX}"/bin/dextop

echo 'export MAIN_DIRECTORY="${PREFIX%/*}"'										>> "${PREFIX}"/bin/dextop
echo 'export BINARIES_DIRECTORY="${PREFIX}"/bin'								>> "${PREFIX}"/bin/dextop
echo 'export CONFIGURATIONS_DIRECTORY="${PREFIX}"/etc'							>> "${PREFIX}"/bin/dextop
echo 'export SOURCES_DIRECTORY="${PREFIX}"/etc/apt'								>> "${PREFIX}"/bin/dextop
echo 'export HOME_DIRECTORY="${PREFIX%/*}"/home'								>> "${PREFIX}"/bin/dextop
echo 'export LIBRARIES_DIRECTORY="${PREFIX}"/lib'								>> "${PREFIX}"/bin/dextop
echo 'export BACKUP_DIRECTORY="${MAIN_DIRECTORY}"/bkp'							>> "${PREFIX}"/bin/dextop
echo 'export CONTAINER_DIRECTORY="${MAIN_DIRECTORY}"/cnt'						>> "${PREFIX}"/bin/dextop
echo 'export IMAGE_DIRECTORY="${MAIN_DIRECTORY}"/img'							>> "${PREFIX}"/bin/dextop
echo 'export MOUNT_DIRECTORY="${MAIN_DIRECTORY}"/mnt'							>> "${PREFIX}"/bin/dextop

echo "export desktop_option=${desktop_option}"									>> "${PREFIX}"/bin/dextop
echo "export install_option=${install_option}"									>> "${PREFIX}"/bin/dextop

# update variables

. "${PREFIX}"/bin/dextop

# run failsafe package install:
# termux package servers are sometimes unresponsive or badly authenticated

console.fwd "Please wait..."
echo

bash -c 'yes | pkg update'														>> /dev/null 2>&1
bash -c 'yes | pkg upgrade'														>> /dev/null 2>&1
bash -c 'yes | pkg install proot debootstrap'									>> /dev/null 2>&1

console.log "pkg update" &

console.progress "Forcing refresh..."
echo

# fix directory structure

directories_list=(
	bin
	etc
	lib
	opt
	tmp
)

for directory in ${directories_list[@]}
do
	ln -s -f "${PREFIX}"/"${directory}" "${MAIN_DIRECTORY}"/"${directory}"
done

# download utilities

utilities_list+=(
	termux-additions
	termux-packages
	termux-storage
	termux-update
	
	container-expand
	container-image
	container-packages
	container-repositories
	container-session
	container-system
	container-user
	container-vnc
)

for utility in ${utilities_list[@]}
do
	console.download get.dxtp.app "${BINARIES_DIRECTORY}" "${utility}"
done

# in order of execution

if [ ! -f "${BINARIES_DIRECTORY}"/dextop-checkpoint-complete ]
then
	# termux

	if [ ! -f "${BINARIES_DIRECTORY}"/termux-checkpoint-complete ]
	then
		if [ "${install_option}" = "update" ]
		then
			"${BINARIES_DIRECTORY}"/termux-update
		fi

		"${BINARIES_DIRECTORY}"/termux-storage
		"${BINARIES_DIRECTORY}"/termux-packages
		"${BINARIES_DIRECTORY}"/termux-additions

		console.file "${BINARIES_DIRECTORY}" termux-checkpoint-complete
	fi

	# container

	if [ ! -f "${BINARIES_DIRECTORY}"/container-checkpoint-complete ]
	then
		"${BINARIES_DIRECTORY}"/container-image
		"${BINARIES_DIRECTORY}"/container-system

		container_command "${BINARIES_DIRECTORY}"/container-expand
		container_command "${BINARIES_DIRECTORY}"/container-repositories
		container_command "${BINARIES_DIRECTORY}"/container-packages
		container_command "${BINARIES_DIRECTORY}"/container-user

		console.file "${BINARIES_DIRECTORY}" container-checkpoint-complete
	fi

	console.file "${BINARIES_DIRECTORY}" dextop-checkpoint-complete
fi