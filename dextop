#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-i|--i3wm)
			desktop_option="i3wm"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-n|--none)
			desktop_option="none"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-i, --i3wm             \t I3WM setup: install i3 window manager and utilities."
			echo -e "-x, --xfce             \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none             \t No DE setup: console access to environment and utilities."
			echo
			echo -e "-b, --base             \t Base setup: download and install distribution image only."
			echo
			echo -e "-f, --full             \t Full setup: download and install full desktop environment and utilities."
			echo
			echo -e "-u, --update           \t Package update: check/download/install Termux and Termux API package updates."
			echo
			echo -e "-h, --help             \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear #

console.clear

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

# defaults #

[ -z "${desktop_option}" ]														&& desktop_option="i3wm"
[ -z "${user_name}" ]															&& user_name="termux"

# functions #

# export variables

echo "# ${script} #"															>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop

echo 'export DISPLAY=":1"'														>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export DISPLAY_NUMBER="${DISPLAY/:/}"'									>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export PORT="590${DISPLAY_NUMBER}"'										>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop

echo 'export MAIN_DIRECTORY="${PREFIX%/*}"'										>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export BINARIES_DIRECTORY="${PREFIX}"/bin'								>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export CONFIGURATIONS_DIRECTORY="${PREFIX}"/etc'							>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export SOURCES_DIRECTORY="${PREFIX}"/etc/apt'								>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export HOME_DIRECTORY="${PREFIX%/*}"/home'								>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export LIBRARIES_DIRECTORY="${PREFIX}"/lib'								>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export BACKUP_DIRECTORY="${MAIN_DIRECTORY}"/bkp'							>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export IMAGE_DIRECTORY="${MAIN_DIRECTORY}"/img'							>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export ISO_DIRECTORY="${MAIN_DIRECTORY}"/iso'								>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo 'export MOUNT_DIRECTORY="${MAIN_DIRECTORY}"/mnt'							>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop

echo "export version=${version}"												>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo "export desktop_option=${desktop_option}"									>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo "export install_option=${install_option}"									>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop
echo "export user_name=${user_name}"											>> "${PREFIX}"/bin/dextop && . "${PREFIX}"/bin/dextop

# run failsafe package install:
# termux package servers are sometimes unresponsive or badly authenticated

console.fwd "Please wait..."
echo

bash -c 'yes | pkg update'														>> /dev/null 2>&1
bash -c 'yes | pkg upgrade'														>> /dev/null 2>&1
bash -c 'yes | pkg install proot debootstrap'									>> /dev/null 2>&1

console.log "pkg update" &

console.progress "Forcing refresh..."
echo

# fix directory structure

directories_list=(
	bin
	etc
	lib
	opt
	tmp
)

for directory in ${directories_list[@]}
do
	ln -s -f "${PREFIX}"/"${directory}" "${MAIN_DIRECTORY}"/"${directory}"
done

# download utilities

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-additions
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-packages
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-storage
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	termux-update

console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-expand
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-image
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-information
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-packages
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-repositories
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-session
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-system
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-user
console.download get.dxtp.app "${BINARIES_DIRECTORY}"	container-vnc

# clear #

console.clear

# in order of execution

if [ ! -f "${BINARIES_DIRECTORY}"/termux-checkpoint-complete ]
then
	"${BINARIES_DIRECTORY}"/termux-update
	"${BINARIES_DIRECTORY}"/termux-storage
	"${BINARIES_DIRECTORY}"/termux-packages
	"${BINARIES_DIRECTORY}"/termux-additions

	touch "${BINARIES_DIRECTORY}"/termux-checkpoint-complete
fi

# confirm uninterrupted setup

touch "${BINARIES_DIRECTORY}"/termux-setup-complete

if [ ! -f "${BINARIES_DIRECTORY}"/container-checkpoint-complete ]
then
	"${BINARIES_DIRECTORY}"/container-information
	"${BINARIES_DIRECTORY}"/container-image
	"${BINARIES_DIRECTORY}"/container-system

	console.container "${BINARIES_DIRECTORY}"/container-user
	console.container "${BINARIES_DIRECTORY}"/container-expand
	console.container "${BINARIES_DIRECTORY}"/container-repositories
	console.container "${BINARIES_DIRECTORY}"/container-packages

	touch "${BINARIES_DIRECTORY}"/container-checkpoint-complete
fi

# confirm uninterrupted setup

touch "${BINARIES_DIRECTORY}"/container-setup-complete