#!/bin/bash

# dependencies /////////////////////////////////////////////////////////////////

curl -s -L get.frbltr.app > "${PREFIX}"/bin/frobulator

. "${PREFIX}"/bin/frobulator

# script ///////////////////////////////////////////////////////////////////////

script=$(basename -- "${BASH_SOURCE[0]}")

# version //////////////////////////////////////////////////////////////////////

version="01-21-2022"

# usage ////////////////////////////////////////////////////////////////////////

while (($#))
do
	case "${1}"
	in
		-x|--xfce)
			option="xfce"
		;;

		-c|--console)
			option="console"
		;;

		-t|--termux)
			option="termux"
		;;

		-u|--update)
			option="update"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-x, --xfce       Setup XFCE desktop environment and utilities."
			echo -e "-c, --console    Setup Console access to environment and utilities."
			echo
			echo -e "-t, --termux     Setup Termux environmen and utilities."
			echo
			echo -e "-u, --update     Update Termux application packages. [ F-Droid ]"
			echo
			echo -e "-h, --help       Show help and usage information."
			echo
			echo -e "'${script}' [ Version // ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# clear ////////////////////////////////////////////////////////////////////////

frobulator.clear

# prompt ///////////////////////////////////////////////////////////////////////

frobulator.script "Setting up ${script#*-}"
echo

# variables ////////////////////////////////////////////////////////////////////

# defaults /////////////////////////////////////////////////////////////////////

if [ -z "${option}" ]
then
	option="xfce"

	frobulator.flag "${option}" "${HOME}"/.dextop dextop-option
fi

# functions ////////////////////////////////////////////////////////////////////

container_setup () {
	# make container setup location known

	if [ $# -eq 0 ]
	then
		ROOT=("${PREFIX}"/bin/*/*)

		export ROOT="${ROOT}"

		return
	fi

	# run container setup commands through 'proot'

	# assume 'termux-exec' is installed

	unset LD_PRELOAD

	# run as 'root' with default system parameters

	unset container_command

	container_command+="proot"
	container_command+=" --kill-on-exit"
	container_command+=" --link2symlink"
	container_command+=" --rootfs=${ROOT}"
	container_command+=" --change-id=0:0"
	container_command+=" --pwd=/root"
	container_command+=" --bind=/apex:/apex"
	container_command+=" --bind=/data:/data"
	container_command+=" --bind=/dev:/dev"
	container_command+=" --bind=/dev/urandom:/dev/random"
	container_command+=" --bind=/proc:/proc"
	container_command+=" --bind=/proc/self/fd:/dev/fd"
	container_command+=" --bind=/proc/self/fd/0:/dev/stdin"
	container_command+=" --bind=/proc/self/fd/1:/dev/stdout"
	container_command+=" --bind=/proc/self/fd/2:/dev/stderr"
	container_command+=" --bind=/storage:/storage"
	container_command+=" --bind=/sys:/sys"
	container_command+=" --bind=/system:/system"
	container_command+=" --bind=/vendor:/vendor"
	container_command+=" --bind=/data/data/com.termux/files/home:/root"
	container_command+=" /usr/bin/env -i"
	container_command+=" PREFIX=/data/data/com.termux/files/usr"
	container_command+=" PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PREFIX}/bin:"
	container_command+=" HOME=/root"
	container_command+=" LANG=C.UTF-8"
	container_command+=" TERM=${TERM}"
	container_command+=" ${@}"

	${container_command}
}

settings_intent () {
	# reload termux settings

	unset settings_command

	settings_command+="am broadcast"
	settings_command+=" --user 0"
	settings_command+=" -a com.termux.app.reload_style"
	settings_command+=" com.termux"

	frobulator.silence "${settings_command}"
}

# run failsafe package install:
# termux package servers are sometimes unresponsive or badly authenticated

frobulator.failsafe proot &

frobulator.fwd "Please wait..."
echo

# in order of execution

if [ ! -f "${HOME}"/.dextop/dextop-setup-checkpoint ]
then
	# preferences

	if [ ! -f "${HOME}"/.dextop/dextop-preferences-checkpoint ]
	then
		# termux

		files_list+=(
			termux-colors
			termux-font
			termux-properties
		)

		frobulator.download get.trmnl.me "${PREFIX}"/bin ${files_list[@]}

		frobulator.link "${PREFIX}"/bin "${HOME}"/.termux termux-colors     colors.properties
		frobulator.link "${PREFIX}"/bin "${HOME}"/.termux termux-font       font.ttf
		frobulator.link "${PREFIX}"/bin "${HOME}"/.termux termux-properties termux.properties

		settings_intent

		files_list=()

		frobulator.file "${HOME}"/.dextop dextop-preferences-checkpoint
	fi

	#  utilities

	if [ ! -f "${HOME}"/.dextop/dextop-utilities-checkpoint ]
	then
		utilities_list+=(
			termux-packages
			termux-repositories
			termux-storage
			termux-update
			container-expansion
			container-image
			container-packages
			container-repositories
			container-session
			container-settings
			container-user
		)

		frobulator.download get.dxtp.app "${PREFIX}"/bin ${utilities_list[@]}

		frobulator.file "${HOME}"/.dextop dextop-utilities-checkpoint
	fi

	# directories

	if [ ! -f "${HOME}"/.dextop/dextop-directories-checkpoint ]
	then
		# add system directories

		directories_list+=(
			bkp
			cnt
			img
			mnt
			media
			storage
		)

		frobulator.directory "${PREFIX}" ${directories_list[@]}

		directories_list=()

		# add home directories

		directories_list+=(
			Desktop
			Documents
			Downloads
			Music
			Pictures
			Public
			Templates
			Videos
		)

		frobulator.directory "${HOME}" ${directories_list[@]}

		directories_list=()

		# generate root directory structure

		directories_list+=(
			bin
			bkp
			cnt
			etc
			img
			lib
			mnt
			opt
			tmp
			media
			storage
		)

		frobulator.link "${PREFIX}" "${PREFIX%/*}" ${directories_list[@]}

		directories_list=()

		frobulator.file "${HOME}"/.dextop dextop-directories-checkpoint
	fi

	# termux

	if [ ! -f "${HOME}"/.dextop/dextop-termux-checkpoint ]
	then
		if [ "${option}" = "update" ]
		then
			"${PREFIX}"/bin/termux-update
		fi

		"${PREFIX}"/bin/termux-storage
		"${PREFIX}"/bin/termux-repositories
		"${PREFIX}"/bin/termux-packages

		frobulator.file "${HOME}"/.dextop dextop-termux-checkpoint
	fi

	# container

	if [[ "${option}" = "termux" ]]
	then
		:
	else
		if [ ! -f "${HOME}"/.dextop/dextop-image-checkpoint ]
		then
			"${PREFIX}"/bin/container-image

			frobulator.file "${HOME}"/.dextop dextop-image-checkpoint
		fi

		if [ ! -f "${HOME}"/.dextop/dextop-container-checkpoint ]
		then
			container_setup

			container_setup "${PREFIX}"/bin/container-expansion
			container_setup "${PREFIX}"/bin/container-repositories
			container_setup "${PREFIX}"/bin/container-packages
			container_setup "${PREFIX}"/bin/container-user

			frobulator.file "${HOME}"/.dextop dextop-container-checkpoint
		fi
	fi

	# additions

	if [ ! -f "${HOME}"/.dextop/dextop-additions-checkpoint ]
	then
		files_list+=(
			termux
			termux-browser
			termux-chrome
			termux-email
			termux-gmail
			termux-information
			termux-message
		)

		frobulator.download get.trmnl.me "${PREFIX}"/bin ${files_list[@]}

		files_list=()

		frobulator.file "${HOME}"/.dextop dextop-additions-checkpoint
	fi

	# shell

	if [ ! -f "${HOME}"/.dextop/dextop-shell-checkpoint ]
	then
		# user home

		files_list+=(
			bash-aliases
			bash-configuration
			bash-functions
			bash-login
			bash-logout
			bash-profile
		)

		frobulator.download get.trmnl.me "${PREFIX}"/bin ${files_list[@]}

		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-aliases       .bash_aliases
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-configuration .bashrc
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-configuration .bash_configuration
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-functions     .bash_functions
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-login         .bash_login
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-logout        .bash_logout
		frobulator.link "${PREFIX}"/bin "${HOME}"      bash-profile       .bash_profile

		frobulator.file "${HOME}" .hushlogin

		if [ "${option}" = "termux"]
		then
			:
		else
			# root home

			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-aliases       .bash_aliases
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-configuration .bashrc
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-configuration .bash_configuration
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-functions     .bash_functions
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-login         .bash_login
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-logout        .bash_logout
			frobulator.link "${PREFIX}"/bin "${ROOT}"/root bash-profile       .bash_profile

			frobulator.file "${ROOT}"/root .hushlogin

			files_list=()
		fi

		frobulator.file "${HOME}"/.dextop dextop-shell-checkpoint
	fi

	# bookmarks

	if [ ! -f "${HOME}"/.dextop/dextop-bookmarks-checkpoint ]
	then
		directories_list=(
			"${PREFIX}"/cnt
			"${PREFIX}"/media/external
			"${PREFIX}"/media/internal
		)

		for directory in ${directories_list[@]}
		do
			if [ -d "${directory}" ]
			then
				frobulator.write "file://${directory}" "${HOME}"/.config/gtk-3.0 bookmarks
			fi
		done

		directories_list=()

		frobulator.file "${HOME}"/.dextop dextop-bookmarks-checkpoint
	fi

	# icons

	if [ ! -f "${HOME}"/.dextop/dextop-icons-checkpoint ]
	then
		# papirus icon theme

		url+="https://"
		url+="github.com/"
		url+="PapirusDevelopmentTeam/"
		url+="papirus-icon-theme/archive/master/master.tar.gz"

		frobulator.download "${url}" "${HOME}" papirus

		mv papirus papirus.tar.gz

		frobulator.extract "${HOME}"/papirus.tar.gz "${HOME}"

		mv "${HOME}"/papirus-icon-theme* "${HOME}"/.icons

		themes_list=(
			Papirus-Dark
			Papirus-Light
			Papirus
		)

		frobulator.keep "${HOME}"/.icons ${themes_list[@]}

		frobulator.require gtk-update-icon-cache

		for theme in ${themes_list[@]}
		do
			frobulator.log "gtk-update-icon-cache ${HOME}/.icons/${theme}"
		done

		rm -rf "${HOME}"/papirus*

		# system icon themes

		files_list+=(
			Adwaita
			default
			hicolor
		)

		frobulator.keep "${ROOT}"/usr/share/icons ${files_list[@]}

		frobulator.keep "${PREFIX}"/share/icons ${files_list[@]}

		files_list=()

		frobulator.file "${HOME}"/.dextop dextop-icons-checkpoint
	fi

	# themes

	if [ ! -f "${HOME}"/.dextop/dextop-themes-checkpoint ]
	then
		files_list+=(
			Arc
			Arc-Dark
			Arc-Darker
			Arc-Lighter
		)

		frobulator.copy "${ROOT}"/usr/share/themes "${PREFIX}"/share/themes ${files_list[@]}

		frobulator.keep "${ROOT}"/usr/share/themes ${files_list[@]}

		frobulator.keep "${PREFIX}"/share/themes ${files_list[@]}

		files_list=()

		frobulator.file "${HOME}"/.dextop dextop-themes-checkpoint
	fi

	# backgrounds

	if [ ! -f "${HOME}"/.dextop/dextop-backgrounds-checkpoint ]
	then
		files_list=(
			dextop.svg
		)

		frobulator.download get.dxtp.app "${HOME}"/.dextop ${files_list[@]}

		frobulator.link "${HOME}"/.dextop "${ROOT}"/usr/share/backgrounds/dextop ${files_list[@]}

		frobulator.link "${HOME}"/.dextop "${PREFIX}"/share/backgrounds/dextop ${files_list[@]}

		files_list=()

		frobulator.file "${HOME}"/.dextop dextop-backgrounds-checkpoint
	fi

	# login

	if [ ! -f "${HOME}"/.dextop/dextop-login-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-login

		frobulator.write login "${HOME}"/.dextop dextop-login

		frobulator.file "${HOME}"/.dextop dextop-login-checkpoint
	fi

	# logout

	if [ ! -f "${HOME}"/.dextop/dextop-logout-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-logout

		frobulator.file "${HOME}"/.dextop dextop-logout-checkpoint
	fi

	# update

	if [ ! -f "${HOME}"/.dextop/dextop-update-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-update

		frobulator.file "${HOME}"/.dextop dextop-update-checkpoint
	fi

	# audio

	if [ ! -f "${HOME}"/.dextop/dextop-audio-checkpoint ]
	then
		frobulator.file "${HOME}"/.dextop dextop-audio

		frobulator.file "${HOME}"/.dextop dextop-audio-checkpoint
	fi

	# move setup

	if [ ! -f "${HOME}"/.dextop/dextop-move-checkpoint ]
	then
		mv "${HOME}"/dextop "${HOME}"/.dextop/dextop

		frobulator.file "${HOME}"/.dextop dextop-move-checkpoint
	fi

	# checkpoint

	frobulator.file "${HOME}"/.dextop dextop-setup-checkpoint
fi

# setup check

frobulator.result dextop-setup-checkpoint "${script}"

# session start

"${PREFIX}"/bin/login
