#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="05-17-2021"

# usage #

distribution_name="${1}"
distribution_version="${2}"

while (($#))
do
        case "${3}" in
				-b|--backup)
					option="backup"
				;;

				-w|--wipe)
					option="wipe"
				;;

                -h|--help)
                        echo
                        echo -e "Usage: ${script} [OPTION]"
                        echo
                        echo -e "Options:"
                        echo
                        echo -e "-h, --help \t Show help and usage information."
                        echo
                        echo -e "'${script}' [ Version ${version} ]"
                        echo

                        exit
                ;;

                *)
                        echo
                        echo "Usage: ${script} [OPTION]"
                        echo
                        echo -e "${script}: Unknown option '${1}'"
                        echo -e "Type './${script} --help' for help and usage information."
                        echo

                        exit 1
                ;;
        esac

        shift
done

# variables #

script=$(basename -- "${BASH_SOURCE[0]}")

iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${distribution_version}/release"
iso_archive="ubuntu-base-${distribution_version}-base-${iso_architecture}.tar.gz"

# set defaults

[ -z "${distribution_name}" ] && distribution_version="ubuntu"
[ -z "${distribution_version}" ] && distribution_version="20.04"

[ -z "${3}" ] &&  option="wipe"

image_backup () {
	# shorthand

	# tar -cvpzf "${1}" -X "${2}" --one-file-system

	# exclude archive
	# archive is stored under "${BACKUP_DIRECTORY}"}


	if [[ -d "${ROOT_DIRECTORY}" ]]
	then
		cd "${ROOT_DIRECTORY}" || exit 1

		for directory in "${ROOT_DIRECTORY}"/*
		do
			tar --create													\
				--verbose													\
				--preserve-permissions										\
				--gzip														\
				--file="${1}"												\
				--exclude="${2}"											\
				--one-file-system "${ROOT_DIRECTORY}"/"${directory}"
		done

		rm -rf "${ROOT_DIRECTORY}"/"${directory}-backup.tar.gz"
	fi

}

image_unpack () {
	# shorthand

	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot

	proot												\
		--link2symlink									\
			tar 										\
				--extract								\
					--file="${1}"						\
					--exclude='dev'						\
					--exclude='proc'					\
					--exclude='sys'						\
					--exclude='system' 2> /dev/null		|| :
}

image_deploy () {
	console.inf "Initializing image setup."
	echo

	console.fwd "Initializing..."
	echo

	console.wait 1

	console.download "${iso_url}" "${SETUP_DIRECTORY}" "${iso_archive}"

	console.inf "Creating image directory."
	echo

	mkdir -p "${ROOT_DIRECTORY}"/"${distribution_version}"

	console.inf "Creating bind directory."
	echo

	mkdir -p "${BIND_DIRECTORY}"

	console.inf "Extracting image contents."
	echo

	cd "${ROOT_DIRECTORY}" || exit 1

	image_unpack "${SETUP_DIRECTORY}/${iso_archive}" || exit 1 &

	console.progress "Unpacking..."
	echo

	wait

	# clean #

	# remove archive after unpacking

	rm -rf "${SETUP_DIRECTORY}/${iso_archive}"
}


if [[ "${option}" = "backup" ]]
then
	for directory in "${ROOT_DIRECTORY}"/*
	do
		console.inf "Backing up."
		echo

		imaage_backup "${BACKUP_DIRECTORY}"/"${directory}-backup.tar.gz" "${ROOT_DIRECTORY}"/"${directory}-backup.tar.gz" &

		console.progress "Packing..."
		echo

		wait
	done
fi

if [[ "${option}" = "wipe" ]]
then

	# remove previous deployments

	[ -d "${ROOT_DIRECTORY}" ] && rm -rf "${ROOT_DIRECTORY}"
fi

# run setup

image_deploy
