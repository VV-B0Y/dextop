#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="06-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

case "${DISTRIBUTION_NAME}" in
	ubuntu)
		iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${DISTRIBUTION_VERSION}/release"
		iso_archive="ubuntu-base-${DISTRIBUTION_VERSION}-base-${iso_architecture}.tar.gz"
	;;
esac

image_archive () {
	# archive previous deployments to backup directory

	# set IFS

	IFS=$'\n'

	deployments_list=()

	for deployment in $(find "${IMAGE_DIRECTORY}" -maxdepth 2 -type d ! -wholename "${IMAGE_DIRECTORY}")
	do
		deployments_list+=("${deployment}")
	done

	console.inf "Number of deployments" ${#deployments_list[@]}
	echo

	select deployment_selection in ${deployments_list[@]}
	do
		ROOT_DIRECTORY="${deployment_selection}"

		console.inf "Archiving. [ ${deployment_selection} ]"
		echo

		break
	done

	console.inf "Archiving selected deployment."
	echo

	tar												\
		--create									\
		--verbose									\
		--gzip										\
		--preserve-permissions						\
			--file="${BACKUP_DIRECTORY}/${1}"		\
			--exclude="${ROOT_DIRECTORY}/${1}		\
			--one-file-system "${ROOT_DIRECTORY}"	|| :
}

image_restore () {
	# restore backed up deployment to image directory

	# set IFS

	IFS=$'\n'

	archives_list=()

	for archive in $(find "${BACKUP_DIRECTORY}" -maxdepth 2 -type f -iname "*.tar.gz" ! -wholename "${BACKUP_DIRECTORY}")
	do
		archives_list+=("${archive}")
	done

	console.inf "Number of archives" ${#archives_list[@]}
	echo

	select archive_selection in ${archives_list[@]}
	do
		console.inf "Restoring. [ ${archive_selection} ]"
		echo

		break
	done

	console.inf "Extracting selected archive."
	echo

	tar													\
		--extract										\
			--file="${restore_selection}"				\
			--directory=
}

image_wipe () {
	# remove previous deployments from image directory

	cd "${IMAGE_DIRECTORY}" || exit 1

	if [ -z $( ls "${IMAGE_DIRECTORY}") ]
	then
		console.err "Image directory is empty."
		echo

		console.wrn "No deployments to wipe."
		echo

		console.fwd "Continuing..."
		echo

		# exit wipe function

		exit
	fi

	console.inf "Wiping previous deployments."
	echo

	rm -rf "${IMAGE_DIRECTORY}"/*
}

image_unpack () {
	# shorthand

	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot

	console.inf "Extracting new deployment."
	echo

	proot												\
		--link2symlink									\
			tar 										\
				--extract								\
					--file="${1}"						\
					--exclude='dev'						\
					--exclude='proc'					\
					--exclude='sys'						\
					--exclude='system' 2> /dev/null		|| :
}

# run setup

# handle backup of previous deployments in image directory

cd "${IMAGE_DIRECTORY}" || exit 1

# verify image directory contents

if [ -z $(ls "${IMAGE_DIRECTORY}") ]
then
	console.inf "Image directory is clean."
	echo

	console.fwd "Proceeding..."
	echo

	:
fi

# verify load directory contents

if [ -z "$(ls ${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE})" ]
then
	console.err "Deployment directory is clean."
	echo

	console.wrn "No deployment to back up."
	echo

	console.fwd "Continuing..."
	echo

	:
fi


# run setup

console.inf "Initializing deployment setup."
echo

console.fwd "Initializing..."
echo

# populate required directories and structure

list=(
	"${BACKUP_DIRECTORY}"
	"${ISO_DIRECTORY}"
	"${IMAGE_DIRECTORY}"
	"${MOUNT_DIRECTORY}"
)

console.inf "Creating required deployment directories."
echo

console.wait 1

image_archive "${DISTRIBUTION_NAME}-${DISTRIBUTION_RELEASE}-backup.tar.gz"

console.wait 1

console.download "${iso_url}" "${ISO_DIRECTORY}" "${iso_archive}"

cd "${ROOT_DIRECTORY}" || exit 1

image_unpack "${ISO_DIRECTORY}/${iso_archive}" || exit 1 &

console.progress "Unpacking..."
echo

wait
