#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="05-29-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

case "${DISTRIBUTION_NAME}" in
	ubuntu)
		iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${DISTRIBUTION_VERSION}/release"
		iso_archive="ubuntu-base-${DISTRIBUTION_VERSION}-base-${iso_architecture}.tar.gz"
	;;
esac

image_directories () {
	# populate required directories and structure

	directories_list=(
		"${BACKUP_DIRECTORY}"
		"${ROOT_DIRECTORY}"
		"${MOUNT_DIRECTORY}"
	)

	for directory in ${directories_list[@]}
	do
		if [ -d "${directory}" ]
		then
			:
		else
			console.inf "Creating directory. [ ${directory} ]"
			echo

			mkdir -p "${directory}"
		fi
	done
}

image_archive () {
	# archive previous deployments to backup directory

	console.inf "Archiving previous deployment."
	echo

	backup_archive="${DISTRIBUTION_NAME}-${DISTRIBUTION_RELEASE}-backup.tar.gz"

	cd "${IMAGE_DIRECTORY}" || exit 1

	if [ -z "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}"/ ]
	then
		:
	else
		for deployment in "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}"
		do
			tar													\
				--create										\
				--preserve-permissions							\
				--gzip											\
				--file="${BACKUP_DIRECTORY}/${backup_archive}"	\
				--exclude="${ROOT_DIRECTORY}/${backup_archive}"	\
				--one-file-system "${ROOT_DIRECTORY}"			|| :
		done
	fi &

	console.progress "Archiving..."
	echo

	# remove previous directory structure for clean unpack

	image_wipe
}

image_restore () {
	if [ -z $(ls "${BACKUP_DIRECTORY}") ]
	then
		console.err "Image directory is empty."
		echo

		console.wrn "No archived deployments to restore."
		echo

		console.fwd "Proceeding..."
		echo

		:

	else
		:
	fi

}

image_wipe () {
	# remove previous deployments from image directory

	console.inf "Wiping previous deployment."
	echo

	if [ -d "${ROOT_DIRECTORY}" ]
	then
		for directory in "${IMAGE_DIRECTORY}/${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}"
		do
			rm -rf "${directory}" &

			console.progress "Wiping..."
			echo

		done
	fi

	# rebuild directory structure

	image_directories
}

image_backup () {
	# handle backup of previous deployments in image directory

	cd "${IMAGE_DIRECTORY}" || exit 1

	if [ -z $(ls "${IMAGE_DIRECTORY}") ]
	then
		console.inf "Image directory is clean."
		echo

		console.fwd "Proceeding..."
		echo

		:

	else
		if  [ -d "${ROOT_DIRECTORY}" ] && [ "${LOAD_DIRECTORY}" == "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}" ]
		then
		console.inf "Directory already exists for distribution name and release. [ ${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE} ]"
		echo

		console.usr "Backup directory?"
		echo

		read reply

			if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yYeEsS] ]]
			then
				image_archive
			else
				image_wipe
			fi
		fi
	fi
}

image_unpack () {
	# shorthand

	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot

	console.inf "Extracting new deployment."
	echo

	proot												\
		--link2symlink									\
			tar 										\
				--extract								\
					--file="${1}"						\
					--exclude='dev'						\
					--exclude='proc'					\
					--exclude='sys'						\
					--exclude='system' 2> /dev/null		|| :
}

image_deploy () {
	console.inf "Initializing deployment setup."
	echo

	console.fwd "Initializing..."
	echo

	console.wait 1

	console.download "${iso_url}" "${MAIN_DIRECTORY}" "${iso_archive}"

	cd "${ROOT_DIRECTORY}" || exit 1

	image_unpack "${MAIN_DIRECTORY}/${iso_archive}" || exit 1 &

	console.progress "Unpacking..."
	echo

	wait

	# clean #

	# remove archive after unpacking

	rm -rf "${MAIN_DIRECTORY}/${iso_archive}"
}

# run setup

image_directories

image_backup

image_deploy
