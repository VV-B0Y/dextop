#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="06-08-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

case "${DISTRIBUTION_NAME}" in
	ubuntu)
		iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${DISTRIBUTION_VERSION}/release"
		iso_archive="ubuntu-base-${DISTRIBUTION_VERSION}-base-${iso_architecture}.tar.gz"
	;;
esac

image_directories () {
	# populate required directories and structure

	console.inf "Creating required deployment directories."
	echo

	directories_list=(
		"${BACKUP_DIRECTORY}"
		"${IMAGE_DIRECTORY}"
		"${ISO_DIRECTORY}"
		"${ROOT_DIRECTORY}"
		"${MOUNT_DIRECTORY}"
	)

	console.directory "${MAIN_DIRECTORY}" ${directories_list[@]}
}

image_archive () {
	# archive previous deployments to backup directory

	# set IFS

	IFS=$'\n'

	deployments_list=()

	for deployment in $(find "${IMAGE_DIRECTORY}" -maxdepth 2 -type d ! -wholename "${IMAGE_DIRECTORY}")
	do
		deployments_list+=("${deployment}")
	done

	console.inf "Number of deployments found" ${#deployments_list[@]}
	echo

	console.msg "Select deployment to archive: "
	echo

	console.wait 1

	printf '\n'

	# print depployments numbered list for selection

	for (( i=0 ; i<${#deployments_list[@]} ; i++ ))
	do
		deployment_directory="${deployments_list[$i]}"

		number=$(($i + 1))

		if (( $i >= 0 && $i <=8 ))
		then
			# handle number spacing for entries 1-9

			printf '\t[  %s ] %s\n' ${number} ${deployment_directory}
		else
			# handle number spacing for entries 10+

			printf '\t[ %s ] %s\n' ${number} ${deployment_directory}
		fi
	done

	printf '\n'

	# values #

	values_list=(
	        selection
	)

	# manage user input for values_list

	console_rtn=()

	console.input ${values_list[@]}

	eval ${console_rtn[@]}

	# check selection input against selection list

	while true
	do
		# range #

		if [[ "${selection}" -lt 1 ]] || [[ "${selection}" -gt "${number}" ]]
		then
			echo
			console.err "Invalid selection:"
			console.wrn "Select a deployment ranging from [ 1 - ${number} ]"
			echo

			console.ipt "Selection: "
			read selection
			echo
		else
			ROOT_DIRECTORY="${deployment_selection}"

			console.inf "Archiving. [ ${deployment_directory} ]"
			echo

			break
		fi
	done

	exit

	console.inf "Archiving selected deployment."
	echo

	tar												\
		--create									\
		--verbose									\
		--gzip										\
		--preserve-permissions						\
			--file="${BACKUP_DIRECTORY}/${1}"		\
			--exclude="${ROOT_DIRECTORY}/${1}"		\
			--one-file-system "${ROOT_DIRECTORY}"	|| :
}

image_restore () {
	# restore backed up deployment to image directory

	# set IFS

	IFS=$'\n'

	archives_list=()

	for archive in $(find "${BACKUP_DIRECTORY}" -maxdepth 2 -type f -iname "*.tar.gz" ! -wholename "${BACKUP_DIRECTORY}")
	do
		archives_list+=("${archive}")
	done

	console.inf "Number of archives" ${#archives_list[@]}
	echo

	select archive_selection in ${archives_list[@]}
	do
		console.inf "Restoring. [ ${archive_selection} ]"
		echo

		break
	done

	IFS='-'

	archive_label="${archive_selection##*/}"

	read archive_name archive_release _ _ _ _ _ _ _ <<< $(echo "${archive_label}")

	console.inf "Extracting selected archive."
	echo

	tar												\
		--extract									\
			--file="${archive_selection}"			\
			--directory="/"
}

image_wipe () {
	# wipe image directory contents

	console.inf "Wiping previous deployments."
	echo

	rm -rf "${IMAGE_DIRECTORY}"/*
}

image_rename () {
	# rename same distribution/release directory contents

	console.inf "Moving deployments."

	for directory in $(find "${IMAGE_DIRECTORY}" -maxdepth 2 -type d ! -wholename "${IMAGE_DIRECTORY}")
	do
		directories_list+=("${directory}")
	done

	for deployment in ${directories_list[@]}
	do
		if [[ "${deployment}" == "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}" ]]
		then
			mv "${deployment}" "${deployment}-${stamp}"
		fi
	done
}

image_unpack () {
	# shorthand

	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot

	ROOT_DIRECTORY="${ROOT_DIRECTORY}"

	console.inf "Extracting new deployment."
	echo

	cd "${ROOT_DIRECTORY}" || exit 1

	proot												\
		--link2symlink									\
			tar 										\
				--extract								\
					--file="${1}"						\
					--exclude='dev'						\
					--exclude='proc'					\
					--exclude='sys'						\
					--exclude='system' 2> /dev/null		|| :
}

# run setup

console.inf "Initializing deployment setup."
echo

console.fwd "Initializing..."
echo

if [[ ! -d "${IMAGE_DIRECTORY}" || -z "$(ls ${IMAGE_DIRECTORY})" ]]
then
	image_directories
else
	if [[ -z "$(ls ${IMAGE_DIRECTORY})" ]]
	then
		console.inf "Image directory clean:"
		echo

		console.wrn "Image directory does not contain any previous deployments"
		echo

		console.fwd "Proceeding..."
		echo
	else
		if [[ ! -z "$(ls ${IMAGE_DIRECTORY})" ]]
		then
			console.usr "Archive deployments?"
			echo

			read reply
			echo

			if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
			then
				image_archive "${DISTRIBUTION_NAME}-${DISTRIBUTION_RELEASE}-backup-${stamp}.tar.gz"

				unset reply
			else
				if [[ -z "$(ls ${BACKUP_DIRECTORY})" ]]
				then
					console.inf "Backup directory clean:"
					echo

					console.wrn "Backup directory does not contain any archives."
					echo

					console.fwd "Proceeding..."
					echo
				else
					if [[ ! -z "$(ls ${BACKUP_DIRECTORY})" ]]
					then
						console.usr "Restore deployments?"
						echo

						read reply
						echo

						if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
						then
							image_restore

							unset reply
						else
							if [[ ! -z "$(ls ${IMAGE_DIRECTORY})" ]] && [[ "${LOAD_DIRECTORY}" == "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}" ]]
							then
								console.wrn "Image directory contains previous deployments."
								echo

								console.err "Deployment matches setup settings [ ${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE} ]"
								echo

								console.usr "Archive matching deployment?"
								echo

								read reply
								echo

								if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
								then
									image_archive "${DISTRIBUTION_NAME}-${DISTRIBUTION_RELEASE}-backup-${stamp}.tar.gz"

									unset reply
								else
									console.err "Cannot deploy over existing image with same configuration."
									echo

									console.usr "Wipe image directory?"
									echo

									read reply
									echo

									if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
									then
										image_wipe

										unset reply
									else
										console.err "Cannot deploy over existing image with same configuration."
										echo

										console.usr "Rename deployment directory?"
										echo

										read reply
										echo

										if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
										then
											image_rename
										else
											console.err "Unable to deploy system image with current set of options."
											echo

											console.fwd "Aborting..."
											echo

											exit 1
										fi
									fi
								fi
							fi
						fi
					fi
				fi
			fi
		fi
	fi
fi


console.download "${iso_url}" "${ISO_DIRECTORY}" "${iso_archive}"

image_unpack "${ISO_DIRECTORY}/${iso_archive}"
