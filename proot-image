#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="06-03-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# variables #

case "${DISTRIBUTION_NAME}" in
	ubuntu)
		iso_url="http://cdimage.ubuntu.com/ubuntu-base/releases/${DISTRIBUTION_VERSION}/release"
		iso_archive="ubuntu-base-${DISTRIBUTION_VERSION}-base-${iso_architecture}.tar.gz"
	;;
esac

image_directories () {
	# populate required directories and structure

	directories_list=(
		"${BACKUP_DIRECTORY}"
		"${ROOT_DIRECTORY}"
		"${MOUNT_DIRECTORY}"
	)

	console.inf "Creating required deployment directories."
	echo

	for directory in ${directories_list[@]}
	do
		if [ -d "${directory}" ]
		then
			:
		else
			mkdir -p "${directory}"
		fi
	done
}

image_archive () {
	# archive previous deployments to backup directory

	console.inf "Archiving previous deployment."
	echo

	cd "${IMAGE_DIRECTORY}" || exit 1

	if [ -z $( ls "${IMAGE_DIRECTORY}") ]
	then
		console.err "Image directory is empty."
		echo

		console.wrn "No existing deployments to archive."
		echo

		console.fwd "Continuing..."
		echo

	else
		tar													\
			--create										\
			--preserve-permissions							\
			--gzip											\
			--file="${BACKUP_DIRECTORY}/${1}"				\
			--exclude="${ROOT_DIRECTORY}/${1}"				\
			--one-file-system "${ROOT_DIRECTORY}"			|| :
	fi
}

image_restore () {
	# restore backed up deployment to image directory

	cd "${BACKUP_DIRECTORY}" || exit 1

	if [ -z $(ls "${BACKUP_DIRECTORY}") ]
	then
		console.err "Image directory is empty."
		echo

		console.wrn "No archived deployments to restore."
		echo

		console.fwd "Aborting..."
		echo

		exit 1

	else
		tar												\
			--extract									\
				--file="${1}"							|| :
	fi
}

image_wipe () {
	# remove previous deployments from image directory

	cd "${IMAGE_DIRECTORY}" || exit 1

	if [ -z $( ls "${IMAGE_DIRECTORY}") ]
	then
		console.err "Image directory is empty."
		echo

		console.wrn "No archived deployments to restore."
		echo

		console.fwd "Continuing..."
		echo

	else
		console.inf "Wiping previous deployments."
		echo

		rm -rf "${IMAGE_DIRECTORY}"/*
	fi
}

image_backup () {
	# handle backup of previous deployments in image directory

	cd "${IMAGE_DIRECTORY}" || exit 1

	# verify image directory contents

	if [ -z $(ls "${IMAGE_DIRECTORY}") ]
	then
		console.inf "Image directory is clean."
		echo

		console.fwd "Proceeding..."
		echo

	else
		# verify load directory contents

		if [ -z $(ls "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}") ]
		then
			console.err "Deployment directory is clean."
			echo

			console.wrn "No deployment to back up."
			echo

			console.fwd "Continuing..."
			echo

			:
		else
			if [ ! -z $(ls "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}") ] && [ "${LOAD_DIRECTORY}" == "${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}" ]
			then
				console.inf "Deployment exists and is populated for distribution name and release. [ ${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE} ]"
				echo

				console.usr "Backup deployment directory?"
				echo

				read reply

				if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yYeEsS] ]]
				then
					image_archive "${DISTRIBUTION_NAME}-${DISTRIBUTION_RELEASE}-backup.tar.gz" &

					console.progress "Archiving..."
					echo

				else
					console.wrn "Cannot unpack over existing deployment."
					echo

					console.usr "Wipe previous deployments?"
					echo

					if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yYeEsS] ]]
					then
						image_wipe &

						console.progress "Wiping..."
						echo
					else
						console.err "No viable option selected for existing deployment."
						echo

						console.fwd "Aborting..."
						echo
					fi
				fi
			fi
		fi
	fi
}

image_unpack () {
	# shorthand

	# proot -l tar -xzf "${1}" -X "${2}" || :

	# exclude archive directories: dev | proc | sys | system
	# 'proot-launch' will bind and mount those device directories to proot

	console.inf "Extracting new deployment."
	echo

	proot												\
		--link2symlink									\
			tar 										\
				--extract								\
					--file="${1}"						\
					--exclude='dev'						\
					--exclude='proc'					\
					--exclude='sys'						\
					--exclude='system' 2> /dev/null		|| :
}

# run setup

image_backup

image_directories

console.inf "Initializing deployment setup."
echo

console.fwd "Initializing..."
echo

console.wait 1

console.download "${iso_url}" "${MAIN_DIRECTORY}" "${iso_archive}"

cd "${ROOT_DIRECTORY}" || exit 1

image_unpack "${MAIN_DIRECTORY}/${iso_archive}" || exit 1 &

console.progress "Unpacking..."
echo

wait

# clean #

# remove archive after unpacking

rm -rf "${MAIN_DIRECTORY}/${iso_archive}"
