#!/bin/bash

# dependencies #

source /data/data/com.termux/files/usr/bin/console
source /data/data/com.termux/files/usr/bin/globals

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="08-12-2021"

# usage #

while (($#))
do
	case "${1}" in
		-h|--help)
			echo
			echo -e "Usage: ${script} [OPTION]"
			echo
			echo -e "Options:"
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		*)
			echo
			echo "Usage: ${script} [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1
		;;
	esac

	shift
done

# prompt #

console.script "Checking system architecture  [ ${script%-*} ]"
echo

# variables #

# set defaults

# list supported processor architectures

cpu_architectures=(
	aarch64
	arm
	amd64
	i*86
	x86_64
)

# list supported image architechtures

img_architectures=(
	arm64
	armhf
	amd64
	i386
	amd64
)

# test processor architecture string

print_architecture="$(dpkg --print-architecture)"

for i in ${!cpu_architectures[@]}
do
	if [[ "$print_architecture" == "${cpu_architectures[i]}" ]]
	then
		img_architecture=${img_architectures[i]}

		console.scs "Valid architecture detected [ ${img_architecture} ]."
		echo

		break
	fi
done

# test image architecture string

if [ -z "$img_architecture" ]
then
	console.wrn "Unknown architecture:"
	console.wrn "Aborting."
	echo

	console.stp "Exiting."
	echo

	exit 1
fi

# export variables

echo '# architecture #'															>> "${PREFIX}"/bin/globals

echo "export iso_architecture=${img_architecture}"								>> "${PREFIX}"/bin/globals
