#!/bin/bash

# dependencies #

[[ -z $(command -v frobulator) ]] && curl -s -L get.frbltr.app > "${PREFIX}"/bin/frobulator

. "${PREFIX}"/bin/frobulator

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-21-2022"

# usage #

# prompt #

frobulate.script "Setting up ${script#*-}"
echo

# variables #

packages_url="https://f-droid.org/en/packages"
repository_url="https://f-droid.org/repo"

# defaults #

# functions #

clean () {
	rm -rf "${PREFIX}"/tmp/*.apk
}

trap 'clean' EXIT

open_intent () {
	unset open_command

	open_command+="am broadcast"
	open_command+=" --user 0"
	open_command+=" -a android.intent.action.VIEW"
	open_command+=" -n com.termux/com.termux.app.TermuxOpenReceiver"
	open_command+=" -d ${@}"

	exec ${open_command} > /dev/null 2>&1
}

# notice

frobulate.err "Google Play Store updates deprecated since November 2020!"
echo

frobulate.wrn "Back up and uninstall the Google Play Store version of Termux."
echo

frobulate.msg "Visit the following wiki pages on how to proceed:"
echo

frobulate.inf "Backing up Termux: https://wiki.termux.com/wiki/Backing_up_Termux"
frobulate.inf "Installing Termux: https://wiki.termux.com/wiki/installation"
echo

frobulate.ins "Select 'Package Installer' when prompted to proceed."
echo

frobulate.separate

frobulate.ask "Check for updates?"

read reply
echo

if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
then
	# process update

	packages_list=(
		com.termux
		com.termux.api
		)

	for package in ${packages_list[@]}
	do
		frobulate.inf "Checking for package update" "[ ${package} ]"
		echo

		archive=$(curl -s -L "${packages_url}"/"${package}" | grep -o "${package}"[aA0-zZ9-_]*.apk | head -n 1)
		archive_version=$(echo "${archive}" | cut -d '_' -f 2 | sed 's/\..*//g')
		archive_url="${repository_url}/${archive}"

		frobulate.fwd "Verifying..."
		echo

		if [ "${package}" = "com.termux" ]
		then
			# com.termux apk

			installed_version=$(echo "${TERMUX_VERSION}" | cut -d '.' -f 2)
		else
			# com.termux.api apk

			installed_version=$(echo "${TERMUX_API_VERSION}" | cut -d '.' -f 2)
		fi

		# application version is deprecated

		if [ "${installed_version}" != "${archive_version}" ]
		then
			frobulate.wrn "Package version has been updated" "[ ${package} // ${archive_version} ]."
			echo

			# request update permission

			frobulate.ask "Update?"

			read reply
			echo

			if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
			then
				frobulate.inf "Dowloading update."
				echo

				# download

				frobulate.download "${repository_url}" "${PREFIX}"/tmp ${archive}

				# update

				open_intent "${PREFIX}"/tmp/"${archive}"

				frobulate.fwd "Updating..."
				echo
			else
				# continue without application update

				frobulate.wrn "Proceeding without update."
				frobulate.wrn "Setup process may encounter errors."
				echo

				frobulate.num "1" "Follow wiki pages stated above to correct issues."
				frobulate.num "2" "Restart setup on a fresh Termux installation to proceed."
				echo

				frobulate.countdown 3 "Continuing" "[ ${script} ]"
				echo
			fi

			# termux application version is up to date
		else
			if [ "${installed_version}" == "${archive_version}" ]
			then
				frobulate.scs "Package version is up to date" "[ ${package} // ${archive_version} ]"
				echo

				frobulate.fwd "Continuing..."
				echo
			fi
		fi
	done
else
	frobulate.countdown 3 "Continuing" "[ ${script} ]"
	echo
fi
