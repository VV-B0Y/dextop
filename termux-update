#!/bin/bash

# dependencies #

[ ! -f "${PREFIX}"/bin/console ] && curl -s -L get.trmnl.me/console/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="01-20-2022"

# usage #

# prompt #

console.script "Setting up ${script#*-}"
echo

# variables #

packages_url="https://f-droid.org/en/packages"
repository_url="https://f-droid.org/repo"

# defaults #

# functions #

clean () {
	rm -rf "${PREFIX}"/tmp/*.apk
}

trap 'clean' EXIT

open_intent () {
	unset open_command

	open_command+="am broadcast"
	open_command+=" --user 0"
	open_command+=" -a android.intent.action.VIEW"
	open_command+=" -n com.termux/com.termux.app.TermuxOpenReceiver"
	open_command+=" -d ${@}"

	exec ${open_command} > /dev/null 2>&1
}

# notice

console.err "Google Play Store updates deprecated since November 2020!"
echo

console.wrn "Back up and uninstall the Google Play Store version of Termux."
echo

console.msg "Visit the following wiki pages on how to proceed:"
echo

console.inf "Backing up Termux: https://wiki.termux.com/wiki/Backing_up_Termux"
console.inf "Installing Termux: https://wiki.termux.com/wiki/installation"
echo

console.ins "Select 'Package Installer' when prompted to proceed."
echo

console.separate

console.ask "Check for updates?"

read reply
echo

if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
then
	# process update

	packages_list=(
		com.termux
		com.termux.api
		)

	for package in ${packages_list[@]}
	do
		console.inf "Checking for package update" "[ ${package} ]"
		echo

		archive=$(curl -s -L "${packages_url}"/"${package}" | grep -o "${package}"[aA0-zZ9-_]*.apk | head -n 1)
		archive_version=$(echo "${archive}" | cut -d '_' -f 2 | sed 's/\..*//g')
		archive_url="${repository_url}/${archive}"

		console.fwd "Verifying..."
		echo

		if [ "${package}" = "com.termux" ]
		then
			# com.termux apk

			installed_version=$(echo "${TERMUX_VERSION}" | cut -d '.' -f 2)
		else
			# com.termux.api apk

			installed_version=$(echo "${TERMUX_API_VERSION}" | cut -d '.' -f 2)
		fi

		# application version is deprecated

		if [ "${installed_version}" != "${archive_version}" ]
		then
			console.wrn "Package version has been updated" "[ ${package} // ${archive_version} ]."
			echo

			# request update permission

			console.ask "Update?"

			read reply
			echo

			if [[ "${reply}" = [yY] ]] || [[ "${reply}" = [yY][eE][sS] ]]
			then
				console.inf "Dowloading update."
				echo

				# download

				console.download "${repository_url}" "${PREFIX}"/tmp ${archive}

				# update

				open_intent "${PREFIX}"/tmp/"${archive}"

				console.fwd "Updating..."
				echo
			else
				# continue without application update

				console.wrn "Proceeding without update."
				console.wrn "Setup process may encounter errors."
				echo

				console.num "1" "Follow wiki pages stated above to correct issues."
				console.num "2" "Restart setup on a fresh Termux installation to proceed."
				echo

				console.countdown 3 "Continuing" "[ ${script} ]"
				echo
			fi

			# termux application version is up to date
		else
			if [ "${installed_version}" == "${archive_version}" ]
			then
				console.scs "Package version is up to date" "[ ${package} // ${archive_version} ]"
				echo

				console.fwd "Continuing..."
				echo
			fi
		fi
	done
else
	console.countdown 3 "Continuing" "[ ${script} ]"
	echo
fi
