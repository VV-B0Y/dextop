#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && source "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="05-23-2021"

# usage #

while (($#))
do
	case "${1}" in
		-f|--full)
			install_option="full"
		;;

		-m|--minimal)
			install_option="minimal"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-f, --full \t\t Full setup: download and install full desktop environment and utilities."
			echo -e "-m, --minimal \t\t Minimal setup: download and install minimal desktop environment and utilities."
			echo
			echo -e "-a, --applications \t Download a set of optimized and precompiled arm64 applications."
			echo
			echo -e "-h, --help \t\t Show help and usage information."
                        echo
                        echo -e "'${script}' [ Version ${version} ]"
                        echo

                        exit
                ;;

                *)
                        echo
                        echo "Usage: ${script} [OPTION]"
                        echo
                        echo -e "${script}: Unknown option '${1}'"
                        echo -e "Type './${script} --help' for help and usage information."
                        echo

                        exit 1
                ;;
        esac

        shift
done

# variables #

# setup variables #

# set defaults

[ -z "${install_option}" ] && install_option="full"

# export variables

echo '# globals #'																				>> "${PREFIX}"/bin/globals

echo 'export DISTRIBUTION_NAME="ubuntu"'														>> "${PREFIX}"/bin/globals
echo 'export DISTRIBUTION_RELEASE="20.04"'														>> "${PREFIX}"/bin/globals
echo 'export DISTRIBUTION_VERSION="20.04.2"'														>> "${PREFIX}"/bin/globals

echo 'export INITIAL_DIRECTORY="${PWD}"'														>> "${PREFIX}"/bin/globals
echo 'export SETUP_DIRECTORY="${PREFIX%/*}"'													>> "${PREFIX}"/bin/globals
echo 'export BINARIES_DIRECTORY="${PREFIX}"/bin'												>> "${PREFIX}"/bin/globals
echo 'export LIBRARIES_DIRECTORY="${PREFIX}"/lib'												>> "${PREFIX}"/bin/globals
echo 'export BACKUP_DIRECTORY="${SETUP_DIRECTORY}"/bkp'											>> "${PREFIX}"/bin/globals
echo 'export IMAGE_DIRECTORY="${SETUP_DIRECTORY}"/img'											>> "${PREFIX}"/bin/globals
echo 'export BIND_DIRECTORY="${SETUP_DIRECTORY}"/mnt'											>> "${PREFIX}"/bin/globals
echo 'export FAKE_DIRECTORY="${SETUP_DIRECTORY}"/fake'											>> "${PREFIX}"/bin/globals

echo 'export LOAD_DIRECTORY="${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}"'						>> "${PREFIX}"/bin/globals
echo 'export ROOT_DIRECTORY="${IMAGE_DIRECTORY}/${LOAD_DIRECTORY}"'								>> "${PREFIX}"/bin/globals

echo '# setup variables #'																		>> "${PREFIX}"/bin/globals

echo "export version=${version}"																>> "${PREFIX}"/bin/globals
echo "export install_option=${install_option}"													>> "${PREFIX}"/bin/globals

source "${PREFIX}"/bin/globals

# download #

console.fwd "Initializing..."
echo

console.download get.dxtp.app "${BINARIES_DIRECTORY}" termux-download

# setup #

# setup termux and proot utilities

console.run "${BINARIES_DIRECTORY}"/termux-download

# welcome message

console.run "${BINARIES_DIRECTORY}"/termux-message

# setup termux package requirements

console.run "${BINARIES_DIRECTORY}"/termux-packages

# setup termux binary fixes and links

console.run "${BINARIES_DIRECTORY}"/termux-links

# setup termux environment files

console.run "${BINARIES_DIRECTORY}"/termux-environment

# setup transient storage - [ device <<>> [ termux <<>> [ proot ] ] ]

console.run "${BINARIES_DIRECTORY}"/termux-storage

# setup termux login messages

console.run "${BINARIES_DIRECTORY}"/termux-welcome

# verify architecture compatibility

console.run "${BINARIES_DIRECTORY}"/proot-architecture

# setup proot user information

console.run "${BINARIES_DIRECTORY}"/proot-information

# setup proot fake /proc entries

console.run "${BINARIES_DIRECTORY}"/proot-fake

# setup proot image

console.run "${BINARIES_DIRECTORY}"/proot-image

# setup proot group IDs

console.run "${BINARIES_DIRECTORY}"/proot-groups

# setup proot libraries preload for enhanced performance

console.run "${BINARIES_DIRECTORY}"/proot-libraries

# setup proot network requirements  - [ device <<>> [ termux <<>> [ proot ] ] ]

console.run "${BINARIES_DIRECTORY}"/proot-network

# setup proot install routine

console.run "${BINARIES_DIRECTORY}"/proot-initialize

# continue setup in proot environment - run 'proot-launch' as 'root'

console.run "${BINARIES_DIRECTORY}"/proot-launch

# setup cleanup #

"${BINARIES_DIRECTORY}"/termux-clean
