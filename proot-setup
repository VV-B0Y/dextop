#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="12-03-2021"

# usage #

if [[ $# -gt 3 ]]
then
	echo
	echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
	echo

	exit 1
fi

if [[ $# -eq 1 ]]
then
	distribution_name="${1}"
fi

if [[ $# -eq 2 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"
fi

if [[ $# -eq 3 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
fi

if [[ $# -eq 4 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
	
	install_option="${4}"
fi

while (($#))
do
	case "${5}" in
		-k|--kde)
			desktop_option="kde"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-i, --i3wm             \t I3WM setup: install i3 window manager and utilities."
			echo
			echo -e "-e, --ede              \t EDE setup: install E desktop environment and utilities."
			echo -e "-k, --kde              \t KDE5 setup: install K desktop environment and utilities."
			echo -e "-x, --xfce             \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none             \t No DE setup: console access to environment and utilities."
			echo
			echo -e "-b, --base             \t Base setup: download and install base distribution image only."
			echo
			echo -e "-f, --full             \t Full setup: download and install full desktop environment and utilities."
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift
done

# prompt #

console.script "Starting setup"
echo

# variables #

# set defaults

# export variables

# container #

container_setup () {
	# use 'proot' to drive container setup without login:
	# keep static environment values for proper setup
	
	# assume termux-exec is present - unset LD_PRELOAD
	
	unset LD_PRELOAD

	command+="proot"
	command+=" --kill-on-exit"
	command+=" --link2symlink"
	command+=" --rootfs=${ROOT_DIRECTORY}"
	command+=" --root-id"
	command+=" --pwd=/root"
	[ -d /apex ]                           && command+=" --bind=/apex"
	[ -d "${PREFIX%/*}"/storage/external ] && command+=" --bind=${PREFIX%/*}/storage/external:/media/external"
	[ -d "${PREFIX%/*}"/storage/internal ] && command+=" --bind=${PREFIX%/*}/storage/internal:/media/internal"
	[ -e "/linkerconfig/ld.config.txt" ]   && command+=" --bind=/linkerconfig/ld.config.txt:/linkerconfig/ld.config.txt"
	[ -f "/plat_property_contexts" ]       && command+=" --bind=/plat_property_contexts:/plat_property_contexts"
	[ -f "/property_contexts" ]            && command+=" --bind=/property_contexts:/property_contexts"
	command+=" --bind=/data"
	command+=" --bind=/dev"
	command+=" --bind=/dev/urandom:/dev/urandom"
	command+=" --bind=/proc"
	command+=" --bind=/proc/self/fd:/dev/fd"
	command+=" --bind=/proc/self/fd/0:/dev/stdin"
	command+=" --bind=/proc/self/fd/1:/dev/stdout"
	command+=" --bind=/proc/self/fd/2:/dev/stderr"
	command+=" --bind=/storage"
	command+=" --bind=/sys"
	command+=" --bind=/system"
	command+=" --bind=/vendor"
	command+=" env -i"
	command+=" HOME=/root"
	command+=" LANG=C.UTF-8"
	command+=" PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/data/data/com.termux/files/usr/bin"
	command+=" TERM=${TERM}"
	command+=" TMPDIR=/tmp"
	command+=" ${@}"
	
	# execute proot
	
	exec ${command}
}

# clear #

console.clear

# source variables

[ -f "${PREFIX}"/bin/dextop ] && . "${PREFIX}"/bin/dextop

# setup #

# in order of execution

if [ ! -f "${BINARIES_DIRECTORY}"/proot-checkpoint-complete ]
then
	bash "${BINARIES_DIRECTORY}"/proot-utilities
	bash "${BINARIES_DIRECTORY}"/proot-architecture
	bash "${BINARIES_DIRECTORY}"/proot-information
	bash "${BINARIES_DIRECTORY}"/proot-distribution
	bash "${BINARIES_DIRECTORY}"/proot-image
	bash "${BINARIES_DIRECTORY}"/proot-groups
	bash "${BINARIES_DIRECTORY}"/proot-environment
	bash "${BINARIES_DIRECTORY}"/proot-network
	bash "${BINARIES_DIRECTORY}"/proot-preload

	console.wait 2 && container_setup "${BINARIES_DIRECTORY}"/proot-user "${user_name}"

	console.wait 2 && container_setup "${BINARIES_DIRECTORY}"/proot-superuser "${user_name}"

	bash "${BINARIES_DIRECTORY}"/proot-shell
	bash "${BINARIES_DIRECTORY}"/proot-silent
	bash "${BINARIES_DIRECTORY}"/proot-welcome

	container_setup "${BINARIES_DIRECTORY}"/proot-expand
	container_setup "${BINARIES_DIRECTORY}"/proot-repositories
	container_setup "${BINARIES_DIRECTORY}"/proot-packages

	bash "${BINARIES_DIRECTORY}"/proot-links
	bash "${BINARIES_DIRECTORY}"/proot-checkpoint
	bash "${BINARIES_DIRECTORY}"/proot-clean
fi

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/proot-setup-complete