#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && source "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="08-12-2021"

# usage #

if [[ $# -gt 3 ]]
then
	echo
	echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
	echo

	exit 1
fi

if [[ $# -eq 1 ]]
then
	distribution_name="${1}"
fi

if [[ $# -eq 2 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"
fi

if [[ $# -eq 3 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
fi

if [[ $# -eq 4 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
	
	install_option="${4}"
fi

while (($#))
do
	case "${5}" in
		-k|--kde)
			desktop_option="kde"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;

		-l|--lite)
			install_option="lite"
		;;
		
		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-k, --kde  \t KDE5 setup: install K desktop environment and utilities."
			echo -e "-x, --xfce \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo
			echo -e "-b, --base \t Base setup: download and install base distribution image only."
			echo
			echo -e "-f, --full \t Full setup: download and install full desktop environment and utilities."
			echo -e "-l, --lite \t Lite setup: download and install lite desktop environment and utilities."
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift
done

# prompt #

console.script "Starting setup [ ${script%-*} ]"
echo

# variables #

# set defaults

[ -z "${distribution_name}" ]													&& distribution_name="ubuntu"
[ -z "${distribution_version}" ]												&& distribution_version="20.04.3"

[ -z "${desktop_option}" ]														&& desktop_option="kde"
[ -z "${install_option}" ]														&& install_option="lite"

# handle distribution code markup

# set IFS

IFS='.'

read code_year code_month code_revision <<< "${distribution_version}"

if [ -z "${code_revision}" ]
then
	distribution_release="${distribution_version}"
else
	distribution_release="${distribution_version%.*}"
fi

# reset IFS

IFS=''

# export variables

echo '# proot #'																>> "${PREFIX}"/bin/dextop

echo "export DISTRIBUTION_NAME=${distribution_name}"							>> "${PREFIX}"/bin/dextop
echo "export DISTRIBUTION_VERSION=${distribution_version}"						>> "${PREFIX}"/bin/dextop
echo "export DISTRIBUTION_RELEASE=${distribution_release}"						>> "${PREFIX}"/bin/dextop

echo 'export LOAD_DIRECTORY="${DISTRIBUTION_NAME}/${DISTRIBUTION_RELEASE}"'		>> "${PREFIX}"/bin/dextop
echo 'export ROOT_DIRECTORY="${IMAGE_DIRECTORY}/${LOAD_DIRECTORY}"'				>> "${PREFIX}"/bin/dextop

# clear #

console.clear

# source variables

[ -f "${PREFIX}"/bin/dextop ] && source "${PREFIX}"/bin/dextop

# setup #

# in order of execution

setup_list=(
	proot-utilities
	proot-message
	proot-architecture
	proot-image
	proot-information
	proot-environment
	proot-groups
	proot-network
	proot-preload
	proot-initialize
	proot-session
)

# setup #

for setup in ${setup_list[@]}
do
	"${BINARIES_DIRECTORY}"/"${setup}"
	
	console.clear
done