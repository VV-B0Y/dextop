#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && . "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="11-18-2021"

# usage #

if [[ $# -gt 3 ]]
then
	echo
	echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
	echo

	exit 1
fi

if [[ $# -eq 1 ]]
then
	distribution_name="${1}"
fi

if [[ $# -eq 2 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"
fi

if [[ $# -eq 3 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
fi

if [[ $# -eq 4 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	desktop_option="${3}"
	
	install_option="${4}"
fi

while (($#))
do
	case "${5}" in
		-k|--kde)
			desktop_option="kde"
		;;

		-x|--xfce)
			desktop_option="xfce"
		;;
		
		-b|--base)
			install_option="base"
		;;

		-f|--full)
			install_option="full"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-i, --i3wm             \t I3WM setup: install i3 window manager and utilities."
			echo
			echo -e "-e, --ede              \t EDE setup: install E desktop environment and utilities."
			echo -e "-k, --kde              \t KDE5 setup: install K desktop environment and utilities."
			echo -e "-x, --xfce             \t XFCE4 setup: install XFCE desktop environment and utilities."
			echo -e "-n, --none             \t No DE setup: console access to environment and utilities."
			echo
			echo -e "-b, --base             \t Base setup: download and install base distribution image only."
			echo
			echo -e "-f, --full             \t Full setup: download and install full desktop environment and utilities."
			echo
			echo -e "-h, --help \t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument:
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift
done

# prompt #

console.script "Starting setup [ ${script%-*} ]"
echo

# variables #

# set defaults

HOME_DIRECTORY="${ROOT_DIRECTORY}"/home/"${user_name}"

# export variables

echo '# proot #'																>> "${PREFIX}"/bin/dextop

echo "export HOME_DIRECTORY=${HOME_DIRECTORY}"									>> "${PREFIX}"/bin/dextop

# clear #

console.clear

# source variables

[ -f "${PREFIX}"/bin/dextop ] && . "${PREFIX}"/bin/dextop

# setup #

setup_list=()

# in order of execution

if [ ! -f "${BINARIES_DIRECTORY}"/proot-checkpoint-complete ]
then
	# outside of proot container:
	# prepare container

	setup_list+=(
		proot-utilities
		proot-architecture
		proot-information
		proot-distribution
		proot-image
		proot-groups
		proot-environment
		proot-network
		proot-preload
		proot-initialize
		proot-checkpoint
		proot-session
	)
else
	# inside of proot container:
	# finish container setup

	setup_list+=(
		proot-bookmarks
		proot-shell
		proot-silent
		proot-welcome
		proot-expand
		proot-repositories
		proot-packages
		proot-links
		proot-clean
	)
	
	# setup user:
	# keep outside of array to pass and handle arguments
	
	# setup proot user
	
	console.wait 2 && "${BINARIES_DIRECTORY}"/proot-user "${user_name}"
	
	# setup proot superuser privilege
	
	console.wait 2 && "${BINARIES_DIRECTORY}"/proot-superuser "${user_name}"
fi

# setup #

for setup in ${setup_list[@]}
do
	"${BINARIES_DIRECTORY}"/"${setup}"
	
	console.clear
done

# confirm uninterrupted setup

echo "yes" > "${BINARIES_DIRECTORY}"/proot-setup-complete