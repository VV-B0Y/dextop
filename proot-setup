#!/bin/bash

# dependencies #

curl -sL get.cnsl.app/console > "${PREFIX}"/bin/console && source "${PREFIX}"/bin/console

# script #

script=$(basename -- "${BASH_SOURCE[0]}")

# version #

version="08-12-2021"

# usage #

if [[ $# -gt 3 ]]
then
	echo
	echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
	echo

	exit 1
fi

if [[ $# -eq 1 ]]
then
	distribution_name="${1}"
fi

if [[ $# -eq 2 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"
fi

if [[ $# -eq 3 ]]
then
	distribution_name="${1}"
	distribution_version="${2}"

	install_option="${3}"
fi

while (($#))
do
	case "${3}" in
		-f|--full)
			install_option="full"
		;;

		-m|--minimal)
			install_option="minimal"
		;;

		-h|--help)
			echo
			echo -e "USAGE:"
			echo
			echo -e "-f, --full \t\t Full setup: download and install full desktop environment and utilities."
			echo -e "-m, --minimal \t\t Minimal setup: download and install minimal desktop environment and utilities."
			echo
			echo -e "-h, --help \t\t Show help and usage information."
			echo
			echo -e "'${script}' [ Version ${version} ]"
			echo

			exit
		;;

		"")
			# handle empty argument
			# use default values specified in script

			:
		;;

		*)
			echo
			echo -e "Usage: ${script} [Distribution Name] | [Distribution Version] | [OPTION]"
			echo
			echo -e "${script}: Unknown option '${1}'"
			echo -e "Type './${script} --help' for help and usage information."
			echo

			exit 1

		;;

		esac

	shift

done

# variables #

# set defaults

[ -z "${distribution_name}" ]				&& distribution_name="ubuntu"
[ -z "${distribution_version}" ]			&& distribution_version="20.04.2"

[ -z "${install_option}" ]					&& install_option="full"

# handle distribution code markup

# set IFS

IFS='.'

read code_year code_month code_revision <<< "${distribution_version}"

if [ -z "${code_revision}" ]
then
	distribution_release="${distribution_version}"
else
	distribution_release="${distribution_version%.*}"
fi

# reset IFS

IFS=''

# export variables

echo '# proot variables #'														>> "${PREFIX}"/bin/globals

echo "export DISTRIBUTION_NAME=${distribution_name}"							>> "${PREFIX}"/bin/globals
echo "export DISTRIBUTION_VERSION=${distribution_version}"						>> "${PREFIX}"/bin/globals
echo "export DISTRIBUTION_RELEASE=${distribution_release}"						>> "${PREFIX}"/bin/globals

echo "export install_option=${install_option}"									>> "${PREFIX}"/bin/globals

# source variables

source "${PREFIX}"/bin/globals

# download #

console.fwd "Initializing..."
echo

console.download get.dxtp.app "${BINARIES_DIRECTORY}" proot-download

# setup #

# setup termux and proot utilities

console.run "${BINARIES_DIRECTORY}"/proot-download

# welcome message

console.run "${BINARIES_DIRECTORY}"/proot-message

# verify architecture compatibility

console.run "${BINARIES_DIRECTORY}"/proot-architecture

# setup proot user information

console.run "${BINARIES_DIRECTORY}"/proot-information

# setup proot proc /proc entries

console.run "${BINARIES_DIRECTORY}"/proot-proc

# setup proot image

console.run "${BINARIES_DIRECTORY}"/proot-image

# setup proot group IDs

console.run "${BINARIES_DIRECTORY}"/proot-groups

# setup proot libraries preload for enhanced performance

console.run "${BINARIES_DIRECTORY}"/proot-libraries

# setup proot network requirements  - [ device < // > [ termux < // > [ proot ] ] ]

console.run "${BINARIES_DIRECTORY}"/proot-network

# setup proot install routine

console.run "${BINARIES_DIRECTORY}"/proot-initialize

# continue setup in proot environment - run 'proot-launch' as 'root'

console.run "${BINARIES_DIRECTORY}"/proot-launch

# setup expansion to default system + documentation

"${BINARIES_DIRECTORY}"/proot-expand

# setup proot package requirements

"${BINARIES_DIRECTORY}"/proot-packages

# setup proot binary fixes and links

"${BINARIES_DIRECTORY}"/proot-links

# setup proot user

"${BINARIES_DIRECTORY}"/proot-user "${user_name}"

# setup proot user superuser privileges

"${BINARIES_DIRECTORY}"/proot-superuser "${user_name}"

# setup proot file manager bookmarks

"${BINARIES_DIRECTORY}"/proot-bookmarks

# setup proot silent login

console.run "${BINARIES_DIRECTORY}"/proot-silent

# setup proot environment files

"${BINARIES_DIRECTORY}"/proot-environment

# setup proot command aliases

"${BINARIES_DIRECTORY}"/proot-aliases

# setup proot login messages

"${BINARIES_DIRECTORY}"/proot-welcome

# setup proot vnc configurations

"${BINARIES_DIRECTORY}"/vnc-setup

# setup proot initial login configuration steps

"${BINARIES_DIRECTORY}"/proot-configuration

# setup proot utilities

console.run "${BINARIES_DIRECTORY}"/proot-download

# setup checkpoint #

"${BINARIES_DIRECTORY}"/proot-checkpoint

# setup cleanup #

"${BINARIES_DIRECTORY}"/proot-clean
